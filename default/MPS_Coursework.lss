
MPS_Coursework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  00001a84  00001b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800160  00800160  00001c18  2**0
                  ALLOC
  3 .debug_aranges 00000120  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000397  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016c2  00000000  00000000  000020cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c1  00000000  00000000  00003791  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001083  00000000  00000000  00004152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  000051d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000690  00000000  00000000  000054d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000150d  00000000  00000000  00005b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00007075  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
       2:	38 c0       	rjmp	.+112    	; 0x74 <__bad_interrupt>
       4:	48 c1       	rjmp	.+656    	; 0x296 <__vector_2>
       6:	36 c0       	rjmp	.+108    	; 0x74 <__bad_interrupt>
       8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
       a:	34 c0       	rjmp	.+104    	; 0x74 <__bad_interrupt>
       c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
       e:	32 c0       	rjmp	.+100    	; 0x74 <__bad_interrupt>
      10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
      12:	b4 c3       	rjmp	.+1896   	; 0x77c <__vector_9>
      14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
      16:	52 c4       	rjmp	.+2212   	; 0x8bc <__vector_11>
      18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
      1a:	88 c4       	rjmp	.+2320   	; 0x92c <__vector_13>
      1c:	2c c0       	rjmp	.+88     	; 0x76 <__vector_14>
      1e:	2a c0       	rjmp	.+84     	; 0x74 <__bad_interrupt>
      20:	72 c1       	rjmp	.+740    	; 0x306 <__vector_16>
      22:	28 c0       	rjmp	.+80     	; 0x74 <__bad_interrupt>
      24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>
      26:	26 c0       	rjmp	.+76     	; 0x74 <__bad_interrupt>
      28:	25 c0       	rjmp	.+74     	; 0x74 <__bad_interrupt>
      2a:	c2 c0       	rjmp	.+388    	; 0x1b0 <ascii_byte_to_digit+0x3a>
      2c:	c4 c0       	rjmp	.+392    	; 0x1b6 <ascii_byte_to_digit+0x40>
      2e:	c5 c0       	rjmp	.+394    	; 0x1ba <ascii_byte_to_digit+0x44>
      30:	c6 c0       	rjmp	.+396    	; 0x1be <ascii_byte_to_digit+0x48>
      32:	c7 c0       	rjmp	.+398    	; 0x1c2 <ascii_byte_to_digit+0x4c>
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <ascii_byte_to_digit+0x50>
      36:	c9 c0       	rjmp	.+402    	; 0x1ca <ascii_byte_to_digit+0x54>
      38:	ca c0       	rjmp	.+404    	; 0x1ce <ascii_byte_to_digit+0x58>
      3a:	cb c0       	rjmp	.+406    	; 0x1d2 <ascii_byte_to_digit+0x5c>
      3c:	cc c0       	rjmp	.+408    	; 0x1d6 <ascii_byte_to_digit+0x60>

0000003e <__ctors_end>:
      3e:	11 24       	eor	r1, r1
      40:	1f be       	out	0x3f, r1	; 63
      42:	cf e5       	ldi	r28, 0x5F	; 95
      44:	d2 e0       	ldi	r29, 0x02	; 2
      46:	de bf       	out	0x3e, r29	; 62
      48:	cd bf       	out	0x3d, r28	; 61

0000004a <__do_copy_data>:
      4a:	11 e0       	ldi	r17, 0x01	; 1
      4c:	a0 e6       	ldi	r26, 0x60	; 96
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	e4 e8       	ldi	r30, 0x84	; 132
      52:	fa e1       	ldi	r31, 0x1A	; 26
      54:	02 c0       	rjmp	.+4      	; 0x5a <.do_copy_data_start>

00000056 <.do_copy_data_loop>:
      56:	05 90       	lpm	r0, Z+
      58:	0d 92       	st	X+, r0

0000005a <.do_copy_data_start>:
      5a:	a0 36       	cpi	r26, 0x60	; 96
      5c:	b1 07       	cpc	r27, r17
      5e:	d9 f7       	brne	.-10     	; 0x56 <.do_copy_data_loop>

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 38       	cpi	r26, 0x8E	; 142
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	15 d2       	rcall	.+1066   	; 0x49c <main>
      72:	06 cd       	rjmp	.-1524   	; 0xfffffa80 <__eeprom_end+0xff7efa80>

00000074 <__bad_interrupt>:
      74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <__vector_14>:

static adc_intr_handler_t adc_intr_handler = NULL;
static void *adc_intr_handler_args = NULL;

ISR(ADC_vect)
{
      76:	1f 92       	push	r1
      78:	0f 92       	push	r0
      7a:	0f b6       	in	r0, 0x3f	; 63
      7c:	0f 92       	push	r0
      7e:	11 24       	eor	r1, r1
      80:	2f 93       	push	r18
      82:	3f 93       	push	r19
      84:	4f 93       	push	r20
      86:	5f 93       	push	r21
      88:	6f 93       	push	r22
      8a:	7f 93       	push	r23
      8c:	8f 93       	push	r24
      8e:	9f 93       	push	r25
      90:	af 93       	push	r26
      92:	bf 93       	push	r27
      94:	ef 93       	push	r30
      96:	ff 93       	push	r31
	if (adc_intr_handler) {
      98:	e0 91 62 01 	lds	r30, 0x0162
      9c:	f0 91 63 01 	lds	r31, 0x0163
      a0:	30 97       	sbiw	r30, 0x00	; 0
      a2:	29 f0       	breq	.+10     	; 0xae <__vector_14+0x38>
		adc_intr_handler(adc_intr_handler_args);
      a4:	80 91 60 01 	lds	r24, 0x0160
      a8:	90 91 61 01 	lds	r25, 0x0161
      ac:	09 95       	icall
	}
}
      ae:	ff 91       	pop	r31
      b0:	ef 91       	pop	r30
      b2:	bf 91       	pop	r27
      b4:	af 91       	pop	r26
      b6:	9f 91       	pop	r25
      b8:	8f 91       	pop	r24
      ba:	7f 91       	pop	r23
      bc:	6f 91       	pop	r22
      be:	5f 91       	pop	r21
      c0:	4f 91       	pop	r20
      c2:	3f 91       	pop	r19
      c4:	2f 91       	pop	r18
      c6:	0f 90       	pop	r0
      c8:	0f be       	out	0x3f, r0	; 63
      ca:	0f 90       	pop	r0
      cc:	1f 90       	pop	r1
      ce:	18 95       	reti

000000d0 <adc_set_intr_handler>:

void
adc_set_intr_handler(adc_intr_handler_t handler, void *args)
{
	cli();
      d0:	f8 94       	cli

	adc_intr_handler = handler;
      d2:	90 93 63 01 	sts	0x0163, r25
      d6:	80 93 62 01 	sts	0x0162, r24
	adc_intr_handler_args = args;
      da:	70 93 61 01 	sts	0x0161, r23
      de:	60 93 60 01 	sts	0x0160, r22

	sei();
      e2:	78 94       	sei
}
      e4:	08 95       	ret

000000e6 <adc_read_byte>:

byte_t
adc_read_byte()
{
	adc_start_conv();
      e6:	36 9a       	sbi	0x06, 6	; 6

	while (adc_conv_in_progress());
      e8:	36 99       	sbic	0x06, 6	; 6
      ea:	fe cf       	rjmp	.-4      	; 0xe8 <adc_read_byte+0x2>

	return ADCH;
      ec:	85 b1       	in	r24, 0x05	; 5
}
      ee:	08 95       	ret

000000f0 <adc_read_byte_async_intr_handler>:

void
adc_read_byte_async_intr_handler(void *raw_args)
{
	struct adc_read_byte_async_intr_handler_args *args =
		(struct adc_read_byte_async_intr_handler_args *) raw_args;
      f0:	fc 01       	movw	r30, r24

	*(args->b) = adc_read_byte();
      f2:	a0 81       	ld	r26, Z
      f4:	b1 81       	ldd	r27, Z+1	; 0x01
}

byte_t
adc_read_byte()
{
	adc_start_conv();
      f6:	36 9a       	sbi	0x06, 6	; 6

	while (adc_conv_in_progress());
      f8:	36 99       	sbic	0x06, 6	; 6
      fa:	fe cf       	rjmp	.-4      	; 0xf8 <adc_read_byte_async_intr_handler+0x8>

	return ADCH;
      fc:	85 b1       	in	r24, 0x05	; 5
adc_read_byte_async_intr_handler(void *raw_args)
{
	struct adc_read_byte_async_intr_handler_args *args =
		(struct adc_read_byte_async_intr_handler_args *) raw_args;

	*(args->b) = adc_read_byte();
      fe:	8c 93       	st	X, r24
	*(args->ready) = true;
     100:	02 80       	ldd	r0, Z+2	; 0x02
     102:	f3 81       	ldd	r31, Z+3	; 0x03
     104:	e0 2d       	mov	r30, r0
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	80 83       	st	Z, r24

	adc_intr_handler = NULL;
     10a:	10 92 63 01 	sts	0x0163, r1
     10e:	10 92 62 01 	sts	0x0162, r1
	adc_intr_handler_args = NULL;
     112:	10 92 61 01 	sts	0x0161, r1
     116:	10 92 60 01 	sts	0x0160, r1
}
     11a:	08 95       	ret

0000011c <adc_read_byte_async>:

void
adc_read_byte_async(byte_t *b, bool *ready)
{
	assert(b);
     11c:	89 2b       	or	r24, r25
     11e:	31 f0       	breq	.+12     	; 0x12c <adc_read_byte_async+0x10>
	assert(ready);
     120:	67 2b       	or	r22, r23
     122:	21 f0       	breq	.+8      	; 0x12c <adc_read_byte_async+0x10>

	static struct adc_read_byte_async_intr_handler_args args;
	assert(adc_intr_handler_args = NULL);
     124:	10 92 61 01 	sts	0x0161, r1
     128:	10 92 60 01 	sts	0x0160, r1
     12c:	a5 dc       	rcall	.-1718   	; 0xfffffa78 <__eeprom_end+0xff7efa78>

0000012e <adc_init>:
static bool adc_initialized = false;

void
adc_init()
{
	assert(!adc_initialized);
     12e:	80 91 64 01 	lds	r24, 0x0164
     132:	81 11       	cpse	r24, r1
     134:	a1 dc       	rcall	.-1726   	; 0xfffffa78 <__eeprom_end+0xff7efa78>

	ADMUX = (1<<REFS0)|(1<<ADLAR)|(1<<MUX3)|(1<<MUX0);
     136:	89 e6       	ldi	r24, 0x69	; 105
     138:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     13a:	8f e8       	ldi	r24, 0x8F	; 143
     13c:	86 b9       	out	0x06, r24	; 6

	adc_initialized = true;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 64 01 	sts	0x0164, r24
}
     144:	08 95       	ret

00000146 <ascii_is_digit>:

#include "ascii.h"

bool
ascii_is_digit(byte_t b)
{
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	0f 92       	push	r0
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	89 83       	std	Y+1, r24	; 0x01
	return b >= '0' && b <= '9';
     152:	89 81       	ldd	r24, Y+1	; 0x01
     154:	80 33       	cpi	r24, 0x30	; 48
     156:	18 f4       	brcc	.+6      	; 0x15e <ascii_is_digit+0x18>
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	08 c0       	rjmp	.+16     	; 0x16e <ascii_is_digit+0x28>
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	8a 33       	cpi	r24, 0x3A	; 58
     164:	08 f0       	brcs	.+2      	; 0x168 <ascii_is_digit+0x22>
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	98 27       	eor	r25, r24
     16c:	89 2f       	mov	r24, r25
}
     16e:	0f 90       	pop	r0
     170:	cf 91       	pop	r28
     172:	df 91       	pop	r29
     174:	08 95       	ret

00000176 <ascii_byte_to_digit>:

int
ascii_byte_to_digit(byte_t b, byte_t *dest)
{
     176:	df 93       	push	r29
     178:	cf 93       	push	r28
     17a:	0f 92       	push	r0
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	89 83       	std	Y+1, r24	; 0x01
     182:	9b 01       	movw	r18, r22
	assert(dest);
     184:	61 15       	cp	r22, r1
     186:	71 05       	cpc	r23, r1
     188:	61 f1       	breq	.+88     	; 0x1e2 <ascii_byte_to_digit+0x6c>

	if (!ascii_is_digit(b))
     18a:	89 81       	ldd	r24, Y+1	; 0x01
#include "ascii.h"

bool
ascii_is_digit(byte_t b)
{
	return b >= '0' && b <= '9';
     18c:	80 33       	cpi	r24, 0x30	; 48
     18e:	50 f1       	brcs	.+84     	; 0x1e4 <ascii_byte_to_digit+0x6e>
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	8a 33       	cpi	r24, 0x3A	; 58
     194:	08 f0       	brcs	.+2      	; 0x198 <ascii_byte_to_digit+0x22>
     196:	91 e0       	ldi	r25, 0x01	; 1
int
ascii_byte_to_digit(byte_t b, byte_t *dest)
{
	assert(dest);

	if (!ascii_is_digit(b))
     198:	99 23       	and	r25, r25
     19a:	21 f5       	brne	.+72     	; 0x1e4 <ascii_byte_to_digit+0x6e>
		return -1;

	switch(b) {
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	fc 01       	movw	r30, r24
     1a2:	f0 97       	sbiw	r30, 0x30	; 48
     1a4:	ea 30       	cpi	r30, 0x0A	; 10
     1a6:	f1 05       	cpc	r31, r1
     1a8:	e0 f4       	brcc	.+56     	; 0x1e2 <ascii_byte_to_digit+0x6c>
     1aa:	eb 5e       	subi	r30, 0xEB	; 235
     1ac:	ff 4f       	sbci	r31, 0xFF	; 255
     1ae:	09 94       	ijmp
	case '0':
		*dest = 0;
     1b0:	f9 01       	movw	r30, r18
     1b2:	10 82       	st	Z, r1
     1b4:	13 c0       	rjmp	.+38     	; 0x1dc <ascii_byte_to_digit+0x66>
		return 0;
	case '1':
		*dest = 1;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	0f c0       	rjmp	.+30     	; 0x1d8 <ascii_byte_to_digit+0x62>
		return 0;
	case '2':
		*dest = 2;
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <ascii_byte_to_digit+0x62>
		return 0;
	case '3':
		*dest = 3;
     1be:	83 e0       	ldi	r24, 0x03	; 3
     1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <ascii_byte_to_digit+0x62>
		return 0;
	case '4':
		*dest = 4;
     1c2:	84 e0       	ldi	r24, 0x04	; 4
     1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <ascii_byte_to_digit+0x62>
		return 0;
	case '5':
		*dest = 5;
     1c6:	85 e0       	ldi	r24, 0x05	; 5
     1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <ascii_byte_to_digit+0x62>
		return 0;
	case '6':
		*dest = 6;
     1ca:	86 e0       	ldi	r24, 0x06	; 6
     1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <ascii_byte_to_digit+0x62>
		return 0;
	case '7':
		*dest = 7;
     1ce:	87 e0       	ldi	r24, 0x07	; 7
     1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <ascii_byte_to_digit+0x62>
		return 0;
	case '8':
		*dest = 8;
     1d2:	88 e0       	ldi	r24, 0x08	; 8
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <ascii_byte_to_digit+0x62>
		return 0;
	case '9':
		*dest = 9;
     1d6:	89 e0       	ldi	r24, 0x09	; 9
     1d8:	f9 01       	movw	r30, r18
     1da:	80 83       	st	Z, r24
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <ascii_byte_to_digit+0x72>
		return 0;
	}

	assert(false);
     1e2:	4a dc       	rcall	.-1900   	; 0xfffffa78 <__eeprom_end+0xff7efa78>
     1e4:	2f ef       	ldi	r18, 0xFF	; 255
     1e6:	3f ef       	ldi	r19, 0xFF	; 255
}
     1e8:	c9 01       	movw	r24, r18
     1ea:	0f 90       	pop	r0
     1ec:	cf 91       	pop	r28
     1ee:	df 91       	pop	r29
     1f0:	08 95       	ret

000001f2 <eas_set_address>:
#define EAS_DOUT	(byte_t)7	/* Data out */

static
void
eas_set_address(uint16_t addr)
{
     1f2:	1f 93       	push	r17
     1f4:	18 2f       	mov	r17, r24
	bit_set(EAS_PORT, EAS_AS_HI);
     1f6:	95 9a       	sbi	0x12, 5	; 18
	EAS_ADDR_PORT = byte_hi(addr);
     1f8:	95 bb       	out	0x15, r25	; 21
	bit_clr(EAS_PORT, EAS_AS_HI);
     1fa:	95 98       	cbi	0x12, 5	; 18
	time_delay_ms(2);
     1fc:	62 e0       	ldi	r22, 0x02	; 2
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	fe d2       	rcall	.+1532   	; 0x802 <time_delay_ms>

	bit_set(EAS_PORT, EAS_AS_LO);
     206:	94 9a       	sbi	0x12, 4	; 18
	EAS_ADDR_PORT = byte_lo(addr);
     208:	15 bb       	out	0x15, r17	; 21
	bit_clr(EAS_PORT, EAS_AS_LO);
     20a:	94 98       	cbi	0x12, 4	; 18
	time_delay_ms(2);
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	f6 d2       	rcall	.+1516   	; 0x802 <time_delay_ms>
}
     216:	1f 91       	pop	r17
     218:	08 95       	ret

0000021a <eas_read_analog>:
	eas_reset_address();
}

byte_t
eas_read_analog(uint16_t addr)
{
     21a:	df 93       	push	r29
     21c:	cf 93       	push	r28
     21e:	0f 92       	push	r0
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
	eas_set_address(addr);
     224:	e6 df       	rcall	.-52     	; 0x1f2 <eas_set_address>
	byte_t b = adc_read_byte();
     226:	5f df       	rcall	.-322    	; 0xe6 <adc_read_byte>
     228:	89 83       	std	Y+1, r24	; 0x01
	eas_reset_address();
     22a:	8f e0       	ldi	r24, 0x0F	; 15
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	e1 df       	rcall	.-62     	; 0x1f2 <eas_set_address>
	return b;
     230:	89 81       	ldd	r24, Y+1	; 0x01
}
     232:	0f 90       	pop	r0
     234:	cf 91       	pop	r28
     236:	df 91       	pop	r29
     238:	08 95       	ret

0000023a <eas_write_bit>:
}

void
eas_write_bit(uint16_t addr, bool bit)
{
	bit_def(EAS_PORT, EAS_DOUT, bit);
     23a:	66 23       	and	r22, r22
     23c:	11 f0       	breq	.+4      	; 0x242 <eas_write_bit+0x8>
     23e:	97 9a       	sbi	0x12, 7	; 18
     240:	01 c0       	rjmp	.+2      	; 0x244 <eas_write_bit+0xa>
     242:	97 98       	cbi	0x12, 7	; 18
	eas_set_address(addr);
     244:	d6 df       	rcall	.-84     	; 0x1f2 <eas_set_address>
	eas_reset_address();
     246:	8f e0       	ldi	r24, 0x0F	; 15
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	d3 df       	rcall	.-90     	; 0x1f2 <eas_set_address>
}
     24c:	08 95       	ret

0000024e <eas_read_bit>:
	eas_initialized = true;
}

bool
eas_read_bit(uint16_t addr)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
	eas_set_address(addr);
     252:	cf df       	rcall	.-98     	; 0x1f2 <eas_set_address>
	bool b = bit_get(EAS_PIN, EAS_DIN);
     254:	00 b3       	in	r16, 0x10	; 16
	eas_reset_address();
     256:	8f e0       	ldi	r24, 0x0F	; 15
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	cb df       	rcall	.-106    	; 0x1f2 <eas_set_address>
     25c:	10 e0       	ldi	r17, 0x00	; 0
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	16 95       	lsr	r17
     262:	07 95       	ror	r16
     264:	8a 95       	dec	r24
     266:	e1 f7       	brne	.-8      	; 0x260 <__stack+0x1>
	return b;
}
     268:	80 2f       	mov	r24, r16
     26a:	81 70       	andi	r24, 0x01	; 1
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	08 95       	ret

00000272 <eas_init>:
static bool eas_initialized = false;

void
eas_init(void)
{
	assert(!eas_initialized);
     272:	80 91 65 01 	lds	r24, 0x0165
     276:	81 11       	cpse	r24, r1
     278:	ff db       	rcall	.-2050   	; 0xfffffa78 <__eeprom_end+0xff7efa78>

	// Set address port to output
	EAS_ADDR_DIR = 0xFF;
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	84 bb       	out	0x14, r24	; 20
	// Set address select to output
	bit_set(EAS_DIR, EAS_AS_HI);
     27e:	8d 9a       	sbi	0x11, 5	; 17
	bit_set(EAS_DIR, EAS_AS_LO);
     280:	8c 9a       	sbi	0x11, 4	; 17
	// Set data out to output
	bit_set(EAS_DIR, EAS_DOUT);
     282:	8f 9a       	sbi	0x11, 7	; 17

	// Set data in to input
	bit_clr(EAS_DIR, EAS_DIN);
     284:	8e 98       	cbi	0x11, 6	; 17
	// Enable pull up
	bit_set(EAS_PORT, EAS_DIN);
     286:	96 9a       	sbi	0x12, 6	; 18

	eas_reset_address();
     288:	8f e0       	ldi	r24, 0x0F	; 15
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	b2 df       	rcall	.-156    	; 0x1f2 <eas_set_address>

	eas_initialized = true;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	80 93 65 01 	sts	0x0165, r24
}
     294:	08 95       	ret

00000296 <__vector_2>:

static eintr_handler_t operators_pult_handler = NULL;
static void *operators_pult_handler_args = NULL;

ISR(INT1_vect)
{
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	0f 92       	push	r0
     29e:	11 24       	eor	r1, r1
     2a0:	2f 93       	push	r18
     2a2:	3f 93       	push	r19
     2a4:	4f 93       	push	r20
     2a6:	5f 93       	push	r21
     2a8:	6f 93       	push	r22
     2aa:	7f 93       	push	r23
     2ac:	8f 93       	push	r24
     2ae:	9f 93       	push	r25
     2b0:	af 93       	push	r26
     2b2:	bf 93       	push	r27
     2b4:	ef 93       	push	r30
     2b6:	ff 93       	push	r31
	if (operators_pult_handler) {
     2b8:	e0 91 66 01 	lds	r30, 0x0166
     2bc:	f0 91 67 01 	lds	r31, 0x0167
     2c0:	30 97       	sbiw	r30, 0x00	; 0
     2c2:	29 f0       	breq	.+10     	; 0x2ce <__vector_2+0x38>
		operators_pult_handler(operators_pult_handler_args);
     2c4:	80 91 68 01 	lds	r24, 0x0168
     2c8:	90 91 69 01 	lds	r25, 0x0169
     2cc:	09 95       	icall
	}
}
     2ce:	ff 91       	pop	r31
     2d0:	ef 91       	pop	r30
     2d2:	bf 91       	pop	r27
     2d4:	af 91       	pop	r26
     2d6:	9f 91       	pop	r25
     2d8:	8f 91       	pop	r24
     2da:	7f 91       	pop	r23
     2dc:	6f 91       	pop	r22
     2de:	5f 91       	pop	r21
     2e0:	4f 91       	pop	r20
     2e2:	3f 91       	pop	r19
     2e4:	2f 91       	pop	r18
     2e6:	0f 90       	pop	r0
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	0f 90       	pop	r0
     2ec:	1f 90       	pop	r1
     2ee:	18 95       	reti

000002f0 <eintr_set_operators_pult_handler>:

void
eintr_set_operators_pult_handler(eintr_handler_t handler, void *args)
{
	cli();
     2f0:	f8 94       	cli
	operators_pult_handler = handler;
     2f2:	90 93 67 01 	sts	0x0167, r25
     2f6:	80 93 66 01 	sts	0x0166, r24
	operators_pult_handler_args = args;
     2fa:	70 93 69 01 	sts	0x0169, r23
     2fe:	60 93 68 01 	sts	0x0168, r22
	sei();
     302:	78 94       	sei
}
     304:	08 95       	ret

00000306 <__vector_16>:

ISR(ANA_COMP_vect)
{
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	2f 93       	push	r18
     312:	3f 93       	push	r19
     314:	4f 93       	push	r20
     316:	5f 93       	push	r21
     318:	6f 93       	push	r22
     31a:	7f 93       	push	r23
     31c:	8f 93       	push	r24
     31e:	9f 93       	push	r25
     320:	af 93       	push	r26
     322:	bf 93       	push	r27
     324:	ef 93       	push	r30
     326:	ff 93       	push	r31
	sei();
     328:	78 94       	sei

	uart_write_byte('A');
     32a:	81 e4       	ldi	r24, 0x41	; 65
     32c:	37 d3       	rcall	.+1646   	; 0x99c <uart_write_byte>
	uart_write_byte('L');
     32e:	8c e4       	ldi	r24, 0x4C	; 76
     330:	35 d3       	rcall	.+1642   	; 0x99c <uart_write_byte>
	uart_write_byte('A');
     332:	81 e4       	ldi	r24, 0x41	; 65
     334:	33 d3       	rcall	.+1638   	; 0x99c <uart_write_byte>
	uart_write_byte('R');
     336:	82 e5       	ldi	r24, 0x52	; 82
     338:	31 d3       	rcall	.+1634   	; 0x99c <uart_write_byte>
	uart_write_byte('M');
     33a:	8d e4       	ldi	r24, 0x4D	; 77
     33c:	2f d3       	rcall	.+1630   	; 0x99c <uart_write_byte>

	time_delay_ms(10);
     33e:	6a e0       	ldi	r22, 0x0A	; 10
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	5d d2       	rcall	.+1210   	; 0x802 <time_delay_ms>

	eas_write_bit(EAS_ADDR_READY, false);
     348:	88 e0       	ldi	r24, 0x08	; 8
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	75 df       	rcall	.-278    	; 0x23a <eas_write_bit>
	sleep_cpu();
     350:	88 95       	sleep
}
     352:	ff 91       	pop	r31
     354:	ef 91       	pop	r30
     356:	bf 91       	pop	r27
     358:	af 91       	pop	r26
     35a:	9f 91       	pop	r25
     35c:	8f 91       	pop	r24
     35e:	7f 91       	pop	r23
     360:	6f 91       	pop	r22
     362:	5f 91       	pop	r21
     364:	4f 91       	pop	r20
     366:	3f 91       	pop	r19
     368:	2f 91       	pop	r18
     36a:	0f 90       	pop	r0
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	0f 90       	pop	r0
     370:	1f 90       	pop	r1
     372:	18 95       	reti

00000374 <eintr_init>:
static bool eintr_initialized = false;

void
eintr_init(void)
{
	cli();
     374:	f8 94       	cli
	assert(!eintr_initialized);
     376:	80 91 6a 01 	lds	r24, 0x016A
     37a:	81 11       	cpse	r24, r1
     37c:	7d db       	rcall	.-2310   	; 0xfffffa78 <__eeprom_end+0xff7efa78>

	// Enable INT1
	bit_set(GICR, INT1);
     37e:	8b b7       	in	r24, 0x3b	; 59
     380:	80 68       	ori	r24, 0x80	; 128
     382:	8b bf       	out	0x3b, r24	; 59
	// Interrupt by falling edge
	bit_set(MCUCR, ISC01);
     384:	85 b7       	in	r24, 0x35	; 53
     386:	82 60       	ori	r24, 0x02	; 2
     388:	85 bf       	out	0x35, r24	; 53
	bit_clr(MCUCR, ISC10);
     38a:	85 b7       	in	r24, 0x35	; 53
     38c:	8b 7f       	andi	r24, 0xFB	; 251
     38e:	85 bf       	out	0x35, r24	; 53
	// Set button port to input
	bit_clr(EINTR_BTN_DIR, EINTR_BTN);
     390:	8b 98       	cbi	0x11, 3	; 17
	// Enable pull up
	bit_set(EINTR_BTN_PORT, EINTR_BTN);
     392:	93 9a       	sbi	0x12, 3	; 18

	// Turn on analog comparator
	bit_clr(ACSR, ACD);
     394:	47 98       	cbi	0x08, 7	; 8
	// Apply AIN0 to positive input
	bit_clr(ACSR, ACBG);
     396:	46 98       	cbi	0x08, 6	; 8
	// Enable interrupt by analog comparator
	bit_set(ACSR, ACIE);
     398:	43 9a       	sbi	0x08, 3	; 8
	// Interrupt by falling edge
	bit_set(ACSR, ACIS1);
     39a:	41 9a       	sbi	0x08, 1	; 8
	bit_clr(ACSR, ACIS0);
     39c:	40 98       	cbi	0x08, 0	; 8
	// Set analog comparator port to input
	bit_clr(EINTR_CMP_DIR, EINTR_CMP_POS);
     39e:	ba 98       	cbi	0x17, 2	; 23
	bit_clr(EINTR_CMP_DIR, EINTR_CMP_NEG);
     3a0:	bb 98       	cbi	0x17, 3	; 23
	// Enable pull ups
	bit_set(EINTR_CMP_PORT, EINTR_CMP_POS);
     3a2:	c2 9a       	sbi	0x18, 2	; 24
	bit_set(EINTR_CMP_PORT, EINTR_CMP_NEG);
     3a4:	c3 9a       	sbi	0x18, 3	; 24

	sleep_enable();
     3a6:	85 b7       	in	r24, 0x35	; 53
     3a8:	80 64       	ori	r24, 0x40	; 64
     3aa:	85 bf       	out	0x35, r24	; 53
	// Set sleep mode to Power-down
	bit_clr(MCUCR, SM2);
     3ac:	85 b7       	in	r24, 0x35	; 53
     3ae:	8f 77       	andi	r24, 0x7F	; 127
     3b0:	85 bf       	out	0x35, r24	; 53
	bit_set(MCUCR, SM1);
     3b2:	85 b7       	in	r24, 0x35	; 53
     3b4:	80 62       	ori	r24, 0x20	; 32
     3b6:	85 bf       	out	0x35, r24	; 53
	bit_clr(MCUCR, SM0);
     3b8:	85 b7       	in	r24, 0x35	; 53
     3ba:	8f 7e       	andi	r24, 0xEF	; 239
     3bc:	85 bf       	out	0x35, r24	; 53

	eintr_initialized = true;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	80 93 6a 01 	sts	0x016A, r24
	sei();
     3c4:	78 94       	sei
}
     3c6:	08 95       	ret

000003c8 <operators_pult_handler>:
	bool S;
};

void
operators_pult_handler(void *raw_args)
{
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
	struct operators_pult_handler_args *args =
		(struct operators_pult_handler_args *) raw_args;
     3cc:	8c 01       	movw	r16, r24

	eas_write_bit(EAS_ADDR_LEDS0, args->x1);
     3ce:	89 e0       	ldi	r24, 0x09	; 9
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	f8 01       	movw	r30, r16
     3d4:	60 81       	ld	r22, Z
     3d6:	31 df       	rcall	.-414    	; 0x23a <eas_write_bit>
	eas_write_bit(EAS_ADDR_LEDS1, args->x2);
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	f8 01       	movw	r30, r16
     3de:	61 81       	ldd	r22, Z+1	; 0x01
     3e0:	2c df       	rcall	.-424    	; 0x23a <eas_write_bit>
	eas_write_bit(EAS_ADDR_LEDS2, args->x3);
     3e2:	8b e0       	ldi	r24, 0x0B	; 11
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	f8 01       	movw	r30, r16
     3e8:	62 81       	ldd	r22, Z+2	; 0x02
     3ea:	27 df       	rcall	.-434    	; 0x23a <eas_write_bit>
	eas_write_bit(EAS_ADDR_LEDS3, args->x4);
     3ec:	8c e0       	ldi	r24, 0x0C	; 12
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	f8 01       	movw	r30, r16
     3f2:	63 81       	ldd	r22, Z+3	; 0x03
     3f4:	22 df       	rcall	.-444    	; 0x23a <eas_write_bit>
	eas_write_bit(EAS_ADDR_LEDS4, args->f);
     3f6:	8d e0       	ldi	r24, 0x0D	; 13
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	f8 01       	movw	r30, r16
     3fc:	64 81       	ldd	r22, Z+4	; 0x04
     3fe:	1d df       	rcall	.-454    	; 0x23a <eas_write_bit>
	eas_write_bit(EAS_ADDR_LEDS5, args->S);
     400:	8e e0       	ldi	r24, 0x0E	; 14
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	f8 01       	movw	r30, r16
     406:	65 81       	ldd	r22, Z+5	; 0x05
     408:	18 df       	rcall	.-464    	; 0x23a <eas_write_bit>
}
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	08 95       	ret

00000410 <read_N1_N2>:

void
read_N1_N2(byte_t *N1, byte_t *N2)
{
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	00 d0       	rcall	.+0      	; 0x41e <read_N1_N2+0xe>
     41e:	0f 92       	push	r0
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	8c 01       	movw	r16, r24
     426:	7b 01       	movw	r14, r22
	byte_t b1 = 0;
     428:	19 82       	std	Y+1, r1	; 0x01
	byte_t b2 = 0;
     42a:	1a 82       	std	Y+2, r1	; 0x02
	byte_t b3 = 0;
     42c:	1b 82       	std	Y+3, r1	; 0x03

	do {
		b1 = uart_must_read_byte();
     42e:	44 d3       	rcall	.+1672   	; 0xab8 <uart_must_read_byte>
     430:	89 83       	std	Y+1, r24	; 0x01
		b2 = uart_must_read_byte();
     432:	42 d3       	rcall	.+1668   	; 0xab8 <uart_must_read_byte>
     434:	8a 83       	std	Y+2, r24	; 0x02
		b3 = uart_must_read_byte();
     436:	40 d3       	rcall	.+1664   	; 0xab8 <uart_must_read_byte>
     438:	8b 83       	std	Y+3, r24	; 0x03
	} while (!ascii_is_digit(b1) || !ascii_is_digit(b2) || !ascii_is_digit(b3));
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	84 de       	rcall	.-760    	; 0x146 <ascii_is_digit>
     43e:	88 23       	and	r24, r24
     440:	b1 f3       	breq	.-20     	; 0x42e <read_N1_N2+0x1e>
     442:	8a 81       	ldd	r24, Y+2	; 0x02
     444:	80 de       	rcall	.-768    	; 0x146 <ascii_is_digit>
     446:	88 23       	and	r24, r24
     448:	91 f3       	breq	.-28     	; 0x42e <read_N1_N2+0x1e>
     44a:	8b 81       	ldd	r24, Y+3	; 0x03
     44c:	7c de       	rcall	.-776    	; 0x146 <ascii_is_digit>
     44e:	88 23       	and	r24, r24
     450:	71 f3       	breq	.-36     	; 0x42e <read_N1_N2+0x1e>

	ascii_byte_to_digit(b1, &b1);
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	be 01       	movw	r22, r28
     456:	6f 5f       	subi	r22, 0xFF	; 255
     458:	7f 4f       	sbci	r23, 0xFF	; 255
     45a:	8d de       	rcall	.-742    	; 0x176 <ascii_byte_to_digit>
	ascii_byte_to_digit(b2, &b2);
     45c:	8a 81       	ldd	r24, Y+2	; 0x02
     45e:	be 01       	movw	r22, r28
     460:	6e 5f       	subi	r22, 0xFE	; 254
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	88 de       	rcall	.-752    	; 0x176 <ascii_byte_to_digit>
	ascii_byte_to_digit(b3, &b3);
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	be 01       	movw	r22, r28
     46a:	6d 5f       	subi	r22, 0xFD	; 253
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	83 de       	rcall	.-762    	; 0x176 <ascii_byte_to_digit>

	*N1 = b1;
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	f8 01       	movw	r30, r16
     474:	80 83       	st	Z, r24
	*N2 = 10 * b2 + b3;
     476:	8a 81       	ldd	r24, Y+2	; 0x02
     478:	2b 81       	ldd	r18, Y+3	; 0x03
     47a:	3a e0       	ldi	r19, 0x0A	; 10
     47c:	83 9f       	mul	r24, r19
     47e:	c0 01       	movw	r24, r0
     480:	11 24       	eor	r1, r1
     482:	28 0f       	add	r18, r24
     484:	f7 01       	movw	r30, r14
     486:	20 83       	st	Z, r18
}
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	ff 90       	pop	r15
     498:	ef 90       	pop	r14
     49a:	08 95       	ret

0000049c <main>:

int
main(void)
{
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	df 93       	push	r29
     4a8:	cf 93       	push	r28
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <main+0x10>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <main+0x12>
     4ae:	00 d0       	rcall	.+0      	; 0x4b0 <main+0x14>
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	cli(); // Disable global interrupts
     4b4:	f8 94       	cli
	uart_init(F_CPU, BAUD_RATE);
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	79 e0       	ldi	r23, 0x09	; 9
     4ba:	8d e3       	ldi	r24, 0x3D	; 61
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	20 e8       	ldi	r18, 0x80	; 128
     4c0:	35 e2       	ldi	r19, 0x25	; 37
     4c2:	40 e0       	ldi	r20, 0x00	; 0
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	53 d3       	rcall	.+1702   	; 0xb6e <uart_init>
	time_init(F_CPU);
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	39 e0       	ldi	r19, 0x09	; 9
     4cc:	4d e3       	ldi	r20, 0x3D	; 61
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	b1 d1       	rcall	.+866    	; 0x83c <time_init>
	adc_init();
     4da:	29 de       	rcall	.-942    	; 0x12e <adc_init>
	eintr_init();
     4dc:	4b df       	rcall	.-362    	; 0x374 <eintr_init>
	eas_init();
     4de:	c9 de       	rcall	.-622    	; 0x272 <eas_init>
	sei(); // Enable global interrupts
     4e0:	78 94       	sei

	eas_write_bit(EAS_ADDR_READY, true);
     4e2:	88 e0       	ldi	r24, 0x08	; 8
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	a8 de       	rcall	.-688    	; 0x23a <eas_write_bit>

	byte_t N1 = 0;
     4ea:	19 82       	std	Y+1, r1	; 0x01
	byte_t N2 = 0;
     4ec:	1a 82       	std	Y+2, r1	; 0x02
	byte_t N3 = 0;
     4ee:	1b 82       	std	Y+3, r1	; 0x03

	do {
		read_N1_N2(&N1, &N2);
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	e8 2e       	mov	r14, r24
     4f4:	f1 2c       	mov	r15, r1
     4f6:	ec 0e       	add	r14, r28
     4f8:	fd 1e       	adc	r15, r29
     4fa:	8e 01       	movw	r16, r28
     4fc:	0f 5f       	subi	r16, 0xFF	; 255
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	c8 01       	movw	r24, r16
     502:	b7 01       	movw	r22, r14
     504:	85 df       	rcall	.-246    	; 0x410 <read_N1_N2>
	} while (!N1_validate() || !N2_validate());
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	87 30       	cpi	r24, 0x07	; 7
     50a:	d0 f3       	brcs	.-12     	; 0x500 <main+0x64>
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	8a 30       	cpi	r24, 0x0A	; 10
     510:	b8 f7       	brcc	.-18     	; 0x500 <main+0x64>
     512:	8a 81       	ldd	r24, Y+2	; 0x02
     514:	8a 30       	cpi	r24, 0x0A	; 10
     516:	a0 f3       	brcs	.-24     	; 0x500 <main+0x64>
     518:	8a 81       	ldd	r24, Y+2	; 0x02
     51a:	8d 30       	cpi	r24, 0x0D	; 13
     51c:	88 f7       	brcc	.-30     	; 0x500 <main+0x64>
	bool x2 = false;
	bool x3 = false;
	bool x4 = false;
	bool f_val = false;

	byte_t KV1 = 0;
     51e:	1c 82       	std	Y+4, r1	; 0x04
	byte_t KV2 = 0;
     520:	1d 82       	std	Y+5, r1	; 0x05
	byte_t NV_val = 0;
     522:	1e 82       	std	Y+6, r1	; 0x06

	static struct operators_pult_handler_args oph_args = {};
	oph_args_update();
     524:	f8 94       	cli
     526:	10 92 6b 01 	sts	0x016B, r1
     52a:	10 92 6c 01 	sts	0x016C, r1
     52e:	10 92 6d 01 	sts	0x016D, r1
     532:	10 92 6e 01 	sts	0x016E, r1
     536:	10 92 6f 01 	sts	0x016F, r1
     53a:	10 92 70 01 	sts	0x0170, r1
     53e:	78 94       	sei

	eintr_set_operators_pult_handler(operators_pult_handler, &oph_args);
     540:	84 ee       	ldi	r24, 0xE4	; 228
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	6b e6       	ldi	r22, 0x6B	; 107
     546:	71 e0       	ldi	r23, 0x01	; 1
     548:	d3 de       	rcall	.-602    	; 0x2f0 <eintr_set_operators_pult_handler>

	for(;;) {
		eas_write_bit(EAS_ADDR_READY, true);
     54a:	88 e0       	ldi	r24, 0x08	; 8
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	74 de       	rcall	.-792    	; 0x23a <eas_write_bit>

		// DEBUG: reading is in progress
		eas_write_bit(EAS_ADDR_DEBUG, true);
     552:	88 e1       	ldi	r24, 0x18	; 24
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	70 de       	rcall	.-800    	; 0x23a <eas_write_bit>

		x1 = !eas_read_bit(EAS_ADDR_X1);
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	77 de       	rcall	.-786    	; 0x24e <eas_read_bit>
     560:	11 e0       	ldi	r17, 0x01	; 1
     562:	e8 2e       	mov	r14, r24
     564:	e1 26       	eor	r14, r17
		x2 = !eas_read_bit(EAS_ADDR_X2);
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	71 de       	rcall	.-798    	; 0x24e <eas_read_bit>
     56c:	f8 2e       	mov	r15, r24
     56e:	f1 26       	eor	r15, r17
		x3 = !eas_read_bit(EAS_ADDR_X3);
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	6c de       	rcall	.-808    	; 0x24e <eas_read_bit>
     576:	08 2f       	mov	r16, r24
     578:	01 27       	eor	r16, r17
		x4 = !eas_read_bit(EAS_ADDR_X4);
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	67 de       	rcall	.-818    	; 0x24e <eas_read_bit>
     580:	18 27       	eor	r17, r24
		f_val = f();
     582:	ee 20       	and	r14, r14
     584:	19 f4       	brne	.+6      	; 0x58c <main+0xf0>
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	13 c0       	rjmp	.+38     	; 0x5b2 <main+0x116>
     58c:	ff 20       	and	r15, r15
     58e:	21 f4       	brne	.+8      	; 0x598 <main+0xfc>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	11 23       	and	r17, r17
     596:	11 f4       	brne	.+4      	; 0x59c <main+0x100>
     598:	21 e0       	ldi	r18, 0x01	; 1
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 27       	eor	r24, r16
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	82 17       	cp	r24, r18
     5a6:	93 07       	cpc	r25, r19
     5a8:	09 f4       	brne	.+2      	; 0x5ac <main+0x110>
     5aa:	41 e0       	ldi	r20, 0x01	; 1
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	48 27       	eor	r20, r24
     5b0:	84 2f       	mov	r24, r20
     5b2:	d8 2e       	mov	r13, r24

		KV1 = eas_read_analog(EAS_ADDR_V1);
     5b4:	84 e0       	ldi	r24, 0x04	; 4
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	30 de       	rcall	.-928    	; 0x21a <eas_read_analog>
     5ba:	8c 83       	std	Y+4, r24	; 0x04
		KV2 = eas_read_analog(EAS_ADDR_V2);
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	2c de       	rcall	.-936    	; 0x21a <eas_read_analog>
     5c2:	8d 83       	std	Y+5, r24	; 0x05
		NV_val = NV();
     5c4:	3d 81       	ldd	r19, Y+5	; 0x05
     5c6:	9a 81       	ldd	r25, Y+2	; 0x02
     5c8:	2c 81       	ldd	r18, Y+4	; 0x04
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	93 9f       	mul	r25, r19
     5ce:	90 2d       	mov	r25, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	82 9f       	mul	r24, r18
     5d4:	80 2d       	mov	r24, r0
     5d6:	11 24       	eor	r1, r1
     5d8:	98 1b       	sub	r25, r24
     5da:	9e 83       	std	Y+6, r25	; 0x06

		bit_def(N3, 0, !eas_read_bit(EAS_ADDR_SW0));
     5dc:	80 e1       	ldi	r24, 0x10	; 16
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	36 de       	rcall	.-916    	; 0x24e <eas_read_bit>
     5e2:	88 23       	and	r24, r24
     5e4:	19 f4       	brne	.+6      	; 0x5ec <main+0x150>
     5e6:	8b 81       	ldd	r24, Y+3	; 0x03
     5e8:	81 60       	ori	r24, 0x01	; 1
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <main+0x154>
     5ec:	8b 81       	ldd	r24, Y+3	; 0x03
     5ee:	8e 7f       	andi	r24, 0xFE	; 254
     5f0:	8b 83       	std	Y+3, r24	; 0x03
		bit_def(N3, 1, !eas_read_bit(EAS_ADDR_SW1));
     5f2:	81 e1       	ldi	r24, 0x11	; 17
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	2b de       	rcall	.-938    	; 0x24e <eas_read_bit>
     5f8:	88 23       	and	r24, r24
     5fa:	19 f4       	brne	.+6      	; 0x602 <main+0x166>
     5fc:	8b 81       	ldd	r24, Y+3	; 0x03
     5fe:	82 60       	ori	r24, 0x02	; 2
     600:	02 c0       	rjmp	.+4      	; 0x606 <main+0x16a>
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	8d 7f       	andi	r24, 0xFD	; 253
     606:	8b 83       	std	Y+3, r24	; 0x03
		bit_def(N3, 2, !eas_read_bit(EAS_ADDR_SW2));
     608:	82 e1       	ldi	r24, 0x12	; 18
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	20 de       	rcall	.-960    	; 0x24e <eas_read_bit>
     60e:	88 23       	and	r24, r24
     610:	19 f4       	brne	.+6      	; 0x618 <main+0x17c>
     612:	8b 81       	ldd	r24, Y+3	; 0x03
     614:	84 60       	ori	r24, 0x04	; 4
     616:	02 c0       	rjmp	.+4      	; 0x61c <main+0x180>
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	8b 7f       	andi	r24, 0xFB	; 251
     61c:	8b 83       	std	Y+3, r24	; 0x03
		bit_def(N3, 3, !eas_read_bit(EAS_ADDR_SW3));
     61e:	83 e1       	ldi	r24, 0x13	; 19
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	15 de       	rcall	.-982    	; 0x24e <eas_read_bit>
     624:	88 23       	and	r24, r24
     626:	19 f4       	brne	.+6      	; 0x62e <main+0x192>
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	88 60       	ori	r24, 0x08	; 8
     62c:	02 c0       	rjmp	.+4      	; 0x632 <main+0x196>
     62e:	8b 81       	ldd	r24, Y+3	; 0x03
     630:	87 7f       	andi	r24, 0xF7	; 247
     632:	8b 83       	std	Y+3, r24	; 0x03
		bit_def(N3, 4, !eas_read_bit(EAS_ADDR_SW4));
     634:	84 e1       	ldi	r24, 0x14	; 20
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0a de       	rcall	.-1004   	; 0x24e <eas_read_bit>
     63a:	88 23       	and	r24, r24
     63c:	19 f4       	brne	.+6      	; 0x644 <main+0x1a8>
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	80 61       	ori	r24, 0x10	; 16
     642:	02 c0       	rjmp	.+4      	; 0x648 <main+0x1ac>
     644:	8b 81       	ldd	r24, Y+3	; 0x03
     646:	8f 7e       	andi	r24, 0xEF	; 239
     648:	8b 83       	std	Y+3, r24	; 0x03
		bit_def(N3, 5, !eas_read_bit(EAS_ADDR_SW5));
     64a:	85 e1       	ldi	r24, 0x15	; 21
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	ff dd       	rcall	.-1026   	; 0x24e <eas_read_bit>
     650:	88 23       	and	r24, r24
     652:	19 f4       	brne	.+6      	; 0x65a <main+0x1be>
     654:	8b 81       	ldd	r24, Y+3	; 0x03
     656:	80 62       	ori	r24, 0x20	; 32
     658:	02 c0       	rjmp	.+4      	; 0x65e <main+0x1c2>
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	8f 7d       	andi	r24, 0xDF	; 223
     65e:	8b 83       	std	Y+3, r24	; 0x03
		bit_def(N3, 6, !eas_read_bit(EAS_ADDR_SW6));
     660:	86 e1       	ldi	r24, 0x16	; 22
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	f4 dd       	rcall	.-1048   	; 0x24e <eas_read_bit>
     666:	88 23       	and	r24, r24
     668:	19 f4       	brne	.+6      	; 0x670 <main+0x1d4>
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	80 64       	ori	r24, 0x40	; 64
     66e:	02 c0       	rjmp	.+4      	; 0x674 <main+0x1d8>
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	8f 7b       	andi	r24, 0xBF	; 191
     674:	8b 83       	std	Y+3, r24	; 0x03
		bit_def(N3, 7, !eas_read_bit(EAS_ADDR_SW7));
     676:	87 e1       	ldi	r24, 0x17	; 23
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	e9 dd       	rcall	.-1070   	; 0x24e <eas_read_bit>
     67c:	88 23       	and	r24, r24
     67e:	19 f4       	brne	.+6      	; 0x686 <main+0x1ea>
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	80 68       	ori	r24, 0x80	; 128
     684:	02 c0       	rjmp	.+4      	; 0x68a <main+0x1ee>
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	8f 77       	andi	r24, 0x7F	; 127
     68a:	8b 83       	std	Y+3, r24	; 0x03

		oph_args_update();
     68c:	f8 94       	cli
     68e:	e0 92 6b 01 	sts	0x016B, r14
     692:	f0 92 6c 01 	sts	0x016C, r15
     696:	00 93 6d 01 	sts	0x016D, r16
     69a:	10 93 6e 01 	sts	0x016E, r17
     69e:	ee 20       	and	r14, r14
     6a0:	19 f4       	brne	.+6      	; 0x6a8 <main+0x20c>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	13 c0       	rjmp	.+38     	; 0x6ce <main+0x232>
     6a8:	ff 20       	and	r15, r15
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <main+0x218>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	11 23       	and	r17, r17
     6b2:	11 f4       	brne	.+4      	; 0x6b8 <main+0x21c>
     6b4:	21 e0       	ldi	r18, 0x01	; 1
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 27       	eor	r24, r16
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	82 17       	cp	r24, r18
     6c2:	93 07       	cpc	r25, r19
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <main+0x22c>
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	48 27       	eor	r20, r24
     6cc:	84 2f       	mov	r24, r20
     6ce:	80 93 6f 01 	sts	0x016F, r24
     6d2:	ef 14       	cp	r14, r15
     6d4:	19 f4       	brne	.+6      	; 0x6dc <main+0x240>
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	07 c0       	rjmp	.+14     	; 0x6ea <main+0x24e>
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	01 17       	cp	r16, r17
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <main+0x248>
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	98 27       	eor	r25, r24
     6e8:	89 2f       	mov	r24, r25
     6ea:	80 93 70 01 	sts	0x0170, r24
     6ee:	78 94       	sei

		// DEBUG: reading finished
		eas_write_bit(EAS_ADDR_DEBUG, false);
     6f0:	88 e1       	ldi	r24, 0x18	; 24
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	a1 dd       	rcall	.-1214   	; 0x23a <eas_write_bit>

		if (f_val)
     6f8:	dd 20       	and	r13, r13
     6fa:	21 f0       	breq	.+8      	; 0x704 <main+0x268>
			eas_write_bit(EAS_ADDR_LED1, true); // LED1 turn on
     6fc:	86 e0       	ldi	r24, 0x06	; 6
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	9b dd       	rcall	.-1226   	; 0x23a <eas_write_bit>
		eas_write_bit(EAS_ADDR_LED2, true); // LED2 turn off
     704:	87 e0       	ldi	r24, 0x07	; 7
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	97 dd       	rcall	.-1234   	; 0x23a <eas_write_bit>

		time_delay_ms(2000);
     70c:	60 ed       	ldi	r22, 0xD0	; 208
     70e:	77 e0       	ldi	r23, 0x07	; 7
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	76 d0       	rcall	.+236    	; 0x802 <time_delay_ms>

		if (f_val)
     716:	dd 20       	and	r13, r13
     718:	21 f0       	breq	.+8      	; 0x722 <main+0x286>
			eas_write_bit(EAS_ADDR_LED1, false); // LED1 turn off
     71a:	86 e0       	ldi	r24, 0x06	; 6
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	8c dd       	rcall	.-1256   	; 0x23a <eas_write_bit>
		if (NV_val > N3)
     722:	9e 81       	ldd	r25, Y+6	; 0x06
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	89 17       	cp	r24, r25
     728:	20 f4       	brcc	.+8      	; 0x732 <main+0x296>
			eas_write_bit(EAS_ADDR_LED2, false); // LED2 turn off
     72a:	87 e0       	ldi	r24, 0x07	; 7
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	84 dd       	rcall	.-1272   	; 0x23a <eas_write_bit>

		time_delay_ms(2000);
     732:	60 ed       	ldi	r22, 0xD0	; 208
     734:	77 e0       	ldi	r23, 0x07	; 7
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	63 d0       	rcall	.+198    	; 0x802 <time_delay_ms>

		eas_write_bit(EAS_ADDR_LED2, false); // LED2 turn off
     73c:	87 e0       	ldi	r24, 0x07	; 7
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	7b dd       	rcall	.-1290   	; 0x23a <eas_write_bit>

		time_delay_ms(2000);
     744:	60 ed       	ldi	r22, 0xD0	; 208
     746:	77 e0       	ldi	r23, 0x07	; 7
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	5a d0       	rcall	.+180    	; 0x802 <time_delay_ms>

		if (f_val)
     74e:	dd 20       	and	r13, r13
     750:	21 f0       	breq	.+8      	; 0x75a <main+0x2be>
			eas_write_bit(EAS_ADDR_LED1, true); // LED1 turn on
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	70 dd       	rcall	.-1312   	; 0x23a <eas_write_bit>

		time_delay_ms(2000);
     75a:	60 ed       	ldi	r22, 0xD0	; 208
     75c:	77 e0       	ldi	r23, 0x07	; 7
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	4f d0       	rcall	.+158    	; 0x802 <time_delay_ms>

		if (f_val)
     764:	dd 20       	and	r13, r13
     766:	21 f0       	breq	.+8      	; 0x770 <main+0x2d4>
			eas_write_bit(EAS_ADDR_LED1, false); // LED1 turn off
     768:	86 e0       	ldi	r24, 0x06	; 6
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	65 dd       	rcall	.-1334   	; 0x23a <eas_write_bit>

		time_delay_ms(4000);
     770:	60 ea       	ldi	r22, 0xA0	; 160
     772:	7f e0       	ldi	r23, 0x0F	; 15
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	44 d0       	rcall	.+136    	; 0x802 <time_delay_ms>
     77a:	e7 ce       	rjmp	.-562    	; 0x54a <main+0xae>

0000077c <__vector_9>:
}

static uint32_t *time_ms_cnt = NULL;

ISR(TIMER0_OVF_vect)
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	af 93       	push	r26
     78c:	bf 93       	push	r27
     78e:	ef 93       	push	r30
     790:	ff 93       	push	r31
	if (time_ms_cnt != NULL && *time_ms_cnt != 0) {
     792:	e0 91 71 01 	lds	r30, 0x0171
     796:	f0 91 72 01 	lds	r31, 0x0172
     79a:	30 97       	sbiw	r30, 0x00	; 0
     79c:	b9 f0       	breq	.+46     	; 0x7cc <__vector_9+0x50>
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	a2 81       	ldd	r26, Z+2	; 0x02
     7a4:	b3 81       	ldd	r27, Z+3	; 0x03
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	a1 05       	cpc	r26, r1
     7aa:	b1 05       	cpc	r27, r1
     7ac:	79 f0       	breq	.+30     	; 0x7cc <__vector_9+0x50>
		(*time_ms_cnt) -= 1;
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	a1 09       	sbc	r26, r1
     7b2:	b1 09       	sbc	r27, r1
     7b4:	80 83       	st	Z, r24
     7b6:	91 83       	std	Z+1, r25	; 0x01
     7b8:	a2 83       	std	Z+2, r26	; 0x02
     7ba:	b3 83       	std	Z+3, r27	; 0x03
		if (*time_ms_cnt == 0)
     7bc:	00 97       	sbiw	r24, 0x00	; 0
     7be:	a1 05       	cpc	r26, r1
     7c0:	b1 05       	cpc	r27, r1
     7c2:	21 f4       	brne	.+8      	; 0x7cc <__vector_9+0x50>
			time_ms_cnt = NULL;
     7c4:	10 92 72 01 	sts	0x0172, r1
     7c8:	10 92 71 01 	sts	0x0171, r1
	}

	TCNT0 = time_ms_tacts;
     7cc:	80 91 73 01 	lds	r24, 0x0173
     7d0:	82 bf       	out	0x32, r24	; 50
}
     7d2:	ff 91       	pop	r31
     7d4:	ef 91       	pop	r30
     7d6:	bf 91       	pop	r27
     7d8:	af 91       	pop	r26
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <time_delay_async_ms>:

void
time_delay_async_ms(uint32_t *ms_cnt)
{
     7e8:	9c 01       	movw	r18, r24
	assert(!time_ms_cnt);
     7ea:	80 91 71 01 	lds	r24, 0x0171
     7ee:	90 91 72 01 	lds	r25, 0x0172
     7f2:	89 2b       	or	r24, r25
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <time_delay_async_ms+0x10>
     7f6:	40 d9       	rcall	.-3456   	; 0xfffffa78 <__eeprom_end+0xff7efa78>
	time_ms_cnt = ms_cnt;
     7f8:	30 93 72 01 	sts	0x0172, r19
     7fc:	20 93 71 01 	sts	0x0171, r18
}
     800:	08 95       	ret

00000802 <time_delay_ms>:

void
time_delay_ms(uint32_t ms_cnt)
{
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	00 d0       	rcall	.+0      	; 0x808 <time_delay_ms+0x6>
     808:	00 d0       	rcall	.+0      	; 0x80a <time_delay_ms+0x8>
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	69 83       	std	Y+1, r22	; 0x01
     810:	7a 83       	std	Y+2, r23	; 0x02
     812:	8b 83       	std	Y+3, r24	; 0x03
     814:	9c 83       	std	Y+4, r25	; 0x04
	time_delay_async_ms(&ms_cnt);
     816:	ce 01       	movw	r24, r28
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	e6 df       	rcall	.-52     	; 0x7e8 <time_delay_async_ms>
	while (ms_cnt > 0);
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	9a 81       	ldd	r25, Y+2	; 0x02
     820:	ab 81       	ldd	r26, Y+3	; 0x03
     822:	bc 81       	ldd	r27, Y+4	; 0x04
     824:	00 97       	sbiw	r24, 0x00	; 0
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	09 f0       	breq	.+2      	; 0x82e <time_delay_ms+0x2c>
     82c:	ff cf       	rjmp	.-2      	; 0x82c <time_delay_ms+0x2a>
}
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	cf 91       	pop	r28
     838:	df 91       	pop	r29
     83a:	08 95       	ret

0000083c <time_init>:
static uint64_t time_ms_tacts = 0;
static bool time_initialized = false;

void
time_init(uint64_t f_cpu)
{
     83c:	af 92       	push	r10
     83e:	bf 92       	push	r11
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	e8 2f       	mov	r30, r24
	cli();
     84e:	f8 94       	cli
	assert(!time_initialized);
     850:	80 91 7b 01 	lds	r24, 0x017B
     854:	81 11       	cpse	r24, r1
     856:	10 d9       	rcall	.-3552   	; 0xfffffa78 <__eeprom_end+0xff7efa78>

	// We are using frequency divider
	uint64_t time_tfreq = f_cpu / 8;
	time_ms_tacts = time_tfreq / TIME_MS_FREQ;
     858:	8e 2f       	mov	r24, r30
     85a:	03 e0       	ldi	r16, 0x03	; 3
     85c:	c0 d1       	rcall	.+896    	; 0xbde <__lshrdi3>
     85e:	f8 ee       	ldi	r31, 0xE8	; 232
     860:	af 2e       	mov	r10, r31
     862:	e3 e0       	ldi	r30, 0x03	; 3
     864:	be 2e       	mov	r11, r30
     866:	cc 24       	eor	r12, r12
     868:	dd 24       	eor	r13, r13
     86a:	ee 24       	eor	r14, r14
     86c:	ff 24       	eor	r15, r15
     86e:	00 e0       	ldi	r16, 0x00	; 0
     870:	10 e0       	ldi	r17, 0x00	; 0
     872:	34 d2       	rcall	.+1128   	; 0xcdc <__udivdi3>
     874:	20 93 73 01 	sts	0x0173, r18
     878:	30 93 74 01 	sts	0x0174, r19
     87c:	40 93 75 01 	sts	0x0175, r20
     880:	50 93 76 01 	sts	0x0176, r21
     884:	60 93 77 01 	sts	0x0177, r22
     888:	70 93 78 01 	sts	0x0178, r23
     88c:	80 93 79 01 	sts	0x0179, r24
     890:	90 93 7a 01 	sts	0x017A, r25

	// Set frequency divider cpu_freq / 8
	TCCR0 = 0;
     894:	13 be       	out	0x33, r1	; 51
	bit_set(TCCR0, CS01);
     896:	83 b7       	in	r24, 0x33	; 51
     898:	82 60       	ori	r24, 0x02	; 2
     89a:	83 bf       	out	0x33, r24	; 51
	// Enable T0 interrupts
	bit_set(TIMSK, TOIE0);
     89c:	89 b7       	in	r24, 0x39	; 57
     89e:	81 60       	ori	r24, 0x01	; 1
     8a0:	89 bf       	out	0x39, r24	; 57

	time_initialized = true;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	80 93 7b 01 	sts	0x017B, r24
	sei();
     8a8:	78 94       	sei
}
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	bf 90       	pop	r11
     8b8:	af 90       	pop	r10
     8ba:	08 95       	ret

000008bc <__vector_11>:

static uart_intr_handler_t uart_rx_intr_handler = NULL;
static void *uart_rx_intr_handler_args = NULL;

ISR(USART_RX_vect)
{
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	ef 93       	push	r30
     8dc:	ff 93       	push	r31
	if (uart_rx_intr_handler) {
     8de:	e0 91 8b 01 	lds	r30, 0x018B
     8e2:	f0 91 8c 01 	lds	r31, 0x018C
     8e6:	30 97       	sbiw	r30, 0x00	; 0
     8e8:	29 f0       	breq	.+10     	; 0x8f4 <__vector_11+0x38>
		uart_rx_intr_handler(uart_rx_intr_handler_args);
     8ea:	80 91 83 01 	lds	r24, 0x0183
     8ee:	90 91 84 01 	lds	r25, 0x0184
     8f2:	09 95       	icall
	}
}
     8f4:	ff 91       	pop	r31
     8f6:	ef 91       	pop	r30
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	0f 90       	pop	r0
     912:	1f 90       	pop	r1
     914:	18 95       	reti

00000916 <uart_set_rx_intr_handler>:

void
uart_set_rx_intr_handler(uart_intr_handler_t handler, void *args)
{
	// Disable global interrupts
	cli();
     916:	f8 94       	cli

	uart_rx_intr_handler = handler;
     918:	90 93 8c 01 	sts	0x018C, r25
     91c:	80 93 8b 01 	sts	0x018B, r24
	uart_rx_intr_handler_args = args;
     920:	70 93 84 01 	sts	0x0184, r23
     924:	60 93 83 01 	sts	0x0183, r22

	// Enable global interrupts
	sei();
     928:	78 94       	sei
}
     92a:	08 95       	ret

0000092c <__vector_13>:

static uart_intr_handler_t uart_tx_intr_handler = NULL;
static void *uart_tx_intr_handler_args = NULL;

ISR(USART_TX_vect)
{
     92c:	1f 92       	push	r1
     92e:	0f 92       	push	r0
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	0f 92       	push	r0
     934:	11 24       	eor	r1, r1
     936:	2f 93       	push	r18
     938:	3f 93       	push	r19
     93a:	4f 93       	push	r20
     93c:	5f 93       	push	r21
     93e:	6f 93       	push	r22
     940:	7f 93       	push	r23
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	af 93       	push	r26
     948:	bf 93       	push	r27
     94a:	ef 93       	push	r30
     94c:	ff 93       	push	r31
	if (uart_tx_intr_handler) {
     94e:	e0 91 81 01 	lds	r30, 0x0181
     952:	f0 91 82 01 	lds	r31, 0x0182
     956:	30 97       	sbiw	r30, 0x00	; 0
     958:	29 f0       	breq	.+10     	; 0x964 <__vector_13+0x38>
		uart_tx_intr_handler(uart_tx_intr_handler_args);
     95a:	80 91 7c 01 	lds	r24, 0x017C
     95e:	90 91 7d 01 	lds	r25, 0x017D
     962:	09 95       	icall
	}
}
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	bf 91       	pop	r27
     96a:	af 91       	pop	r26
     96c:	9f 91       	pop	r25
     96e:	8f 91       	pop	r24
     970:	7f 91       	pop	r23
     972:	6f 91       	pop	r22
     974:	5f 91       	pop	r21
     976:	4f 91       	pop	r20
     978:	3f 91       	pop	r19
     97a:	2f 91       	pop	r18
     97c:	0f 90       	pop	r0
     97e:	0f be       	out	0x3f, r0	; 63
     980:	0f 90       	pop	r0
     982:	1f 90       	pop	r1
     984:	18 95       	reti

00000986 <uart_set_tx_intr_handler>:

void
uart_set_tx_intr_handler(uart_intr_handler_t handler, void *args)
{
	// Disable global interrupts
	cli();
     986:	f8 94       	cli

	uart_tx_intr_handler = handler;
     988:	90 93 82 01 	sts	0x0182, r25
     98c:	80 93 81 01 	sts	0x0181, r24
	uart_tx_intr_handler_args = args;
     990:	70 93 7d 01 	sts	0x017D, r23
     994:	60 93 7c 01 	sts	0x017C, r22

	// Enable global interrupts
	sei();
     998:	78 94       	sei
}
     99a:	08 95       	ret

0000099c <uart_write_byte>:

void
uart_write_byte(byte_t b)
{
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	0f 92       	push	r0
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	89 83       	std	Y+1, r24	; 0x01
	// Wait for register to be ready
	while (!UART_TX_READY);
     9a8:	5d 9b       	sbis	0x0b, 5	; 11
     9aa:	fe cf       	rjmp	.-4      	; 0x9a8 <uart_write_byte+0xc>

	// Write and send b
	UDR = b;
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	8c b9       	out	0x0c, r24	; 12
}
     9b0:	0f 90       	pop	r0
     9b2:	cf 91       	pop	r28
     9b4:	df 91       	pop	r29
     9b6:	08 95       	ret

000009b8 <uart_write_byte_async>:
	uart_tx_intr_handler_args = NULL;
}

void
uart_write_byte_async(byte_t b, bool *ready)
{
     9b8:	df 93       	push	r29
     9ba:	cf 93       	push	r28
     9bc:	0f 92       	push	r0
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	89 83       	std	Y+1, r24	; 0x01
	static struct uart_write_byte_async_intr_handler_args args;
	assert(uart_tx_intr_handler_args == NULL); // Check if async write in progress
     9c4:	80 91 7c 01 	lds	r24, 0x017C
     9c8:	90 91 7d 01 	lds	r25, 0x017D
     9cc:	89 2b       	or	r24, r25
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <uart_write_byte_async+0x1a>
     9d0:	53 d8       	rcall	.-3930   	; 0xfffffa78 <__eeprom_end+0xff7efa78>

	args = (struct uart_write_byte_async_intr_handler_args) {
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	80 93 7e 01 	sts	0x017E, r24
     9dc:	70 93 80 01 	sts	0x0180, r23
     9e0:	60 93 7f 01 	sts	0x017F, r22

void
uart_set_tx_intr_handler(uart_intr_handler_t handler, void *args)
{
	// Disable global interrupts
	cli();
     9e4:	f8 94       	cli

	uart_tx_intr_handler = handler;
     9e6:	84 e0       	ldi	r24, 0x04	; 4
     9e8:	95 e0       	ldi	r25, 0x05	; 5
     9ea:	90 93 82 01 	sts	0x0182, r25
     9ee:	80 93 81 01 	sts	0x0181, r24
	uart_tx_intr_handler_args = args;
     9f2:	8e e7       	ldi	r24, 0x7E	; 126
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	90 93 7d 01 	sts	0x017D, r25
     9fa:	80 93 7c 01 	sts	0x017C, r24

	// Enable global interrupts
	sei();
     9fe:	78 94       	sei
		b = b,
		ready = ready,
	};

	uart_set_tx_intr_handler(uart_write_byte_async_intr_handler, &args);
}
     a00:	0f 90       	pop	r0
     a02:	cf 91       	pop	r28
     a04:	df 91       	pop	r29
     a06:	08 95       	ret

00000a08 <uart_write_byte_async_intr_handler>:
};

static
void
uart_write_byte_async_intr_handler(void *raw_args)
{
     a08:	fc 01       	movw	r30, r24
	assert(raw_args);
     a0a:	00 97       	sbiw	r24, 0x00	; 0
     a0c:	09 f4       	brne	.+2      	; 0xa10 <uart_write_byte_async_intr_handler+0x8>
     a0e:	34 d8       	rcall	.-3992   	; 0xfffffa78 <__eeprom_end+0xff7efa78>

	struct uart_write_byte_async_intr_handler_args *args =
		(struct uart_write_byte_async_intr_handler_args *) raw_args;

	uart_write_byte(args->b);
     a10:	80 81       	ld	r24, Z

void
uart_write_byte(byte_t b)
{
	// Wait for register to be ready
	while (!UART_TX_READY);
     a12:	5d 9b       	sbis	0x0b, 5	; 11
     a14:	fe cf       	rjmp	.-4      	; 0xa12 <uart_write_byte_async_intr_handler+0xa>

	// Write and send b
	UDR = b;
     a16:	8c b9       	out	0x0c, r24	; 12

	struct uart_write_byte_async_intr_handler_args *args =
		(struct uart_write_byte_async_intr_handler_args *) raw_args;

	uart_write_byte(args->b);
	if (args->ready != NULL)
     a18:	01 80       	ldd	r0, Z+1	; 0x01
     a1a:	f2 81       	ldd	r31, Z+2	; 0x02
     a1c:	e0 2d       	mov	r30, r0
     a1e:	30 97       	sbiw	r30, 0x00	; 0
     a20:	11 f0       	breq	.+4      	; 0xa26 <uart_write_byte_async_intr_handler+0x1e>
		*(args->ready) = true;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	80 83       	st	Z, r24

	// Clean up
	uart_tx_intr_handler = NULL;
     a26:	10 92 82 01 	sts	0x0182, r1
     a2a:	10 92 81 01 	sts	0x0181, r1
	uart_tx_intr_handler_args = NULL;
     a2e:	10 92 7d 01 	sts	0x017D, r1
     a32:	10 92 7c 01 	sts	0x017C, r1
}
     a36:	08 95       	ret

00000a38 <uart_read_byte_async>:
	uart_rx_intr_handler_args = NULL;
}

void
uart_read_byte_async(byte_t *b, bool *ready, int *err)
{
     a38:	9c 01       	movw	r18, r24
	assert(b);
     a3a:	00 97       	sbiw	r24, 0x00	; 0
     a3c:	31 f0       	breq	.+12     	; 0xa4a <uart_read_byte_async+0x12>

	static struct uart_read_byte_async_intr_handler_args args;
	assert(uart_rx_intr_handler_args == NULL); // Check if async read in progress
     a3e:	80 91 83 01 	lds	r24, 0x0183
     a42:	90 91 84 01 	lds	r25, 0x0184
     a46:	89 2b       	or	r24, r25
     a48:	09 f0       	breq	.+2      	; 0xa4c <uart_read_byte_async+0x14>
     a4a:	16 d8       	rcall	.-4052   	; 0xfffffa78 <__eeprom_end+0xff7efa78>

	args = (struct uart_read_byte_async_intr_handler_args) {
     a4c:	30 93 86 01 	sts	0x0186, r19
     a50:	20 93 85 01 	sts	0x0185, r18
     a54:	70 93 88 01 	sts	0x0188, r23
     a58:	60 93 87 01 	sts	0x0187, r22
     a5c:	50 93 8a 01 	sts	0x018A, r21
     a60:	40 93 89 01 	sts	0x0189, r20

void
uart_set_rx_intr_handler(uart_intr_handler_t handler, void *args)
{
	// Disable global interrupts
	cli();
     a64:	f8 94       	cli

	uart_rx_intr_handler = handler;
     a66:	82 e7       	ldi	r24, 0x72	; 114
     a68:	95 e0       	ldi	r25, 0x05	; 5
     a6a:	90 93 8c 01 	sts	0x018C, r25
     a6e:	80 93 8b 01 	sts	0x018B, r24
	uart_rx_intr_handler_args = args;
     a72:	85 e8       	ldi	r24, 0x85	; 133
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	90 93 84 01 	sts	0x0184, r25
     a7a:	80 93 83 01 	sts	0x0183, r24

	// Enable global interrupts
	sei();
     a7e:	78 94       	sei
		ready = ready,
		err = err,
	};

	uart_set_rx_intr_handler(uart_read_byte_async_intr_handler, &args);
}
     a80:	08 95       	ret

00000a82 <uart_must_read_byte_async>:

void
uart_must_read_byte_async(byte_t *b, bool *ready)
{
	uart_read_byte_async(b, ready, NULL);
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	d8 df       	rcall	.-80     	; 0xa38 <uart_read_byte_async>
}
     a88:	08 95       	ret

00000a8a <uart_read_byte>:
	sei();
}

int
uart_read_byte(byte_t *b)
{
     a8a:	fc 01       	movw	r30, r24
	assert(b);
     a8c:	00 97       	sbiw	r24, 0x00	; 0
     a8e:	09 f4       	brne	.+2      	; 0xa92 <uart_read_byte+0x8>
     a90:	f3 d7       	rcall	.+4070   	; 0x1a78 <abort>

	// Wait for register to be ready
	while (!UART_RX_READY);
     a92:	5f 9b       	sbis	0x0b, 7	; 11
     a94:	fe cf       	rjmp	.-4      	; 0xa92 <uart_read_byte+0x8>

	if ((UCSRA & (1 << FE)) || (UCSRA & (1 << DOR)) || (UCSRA & (1 << PE))) {
     a96:	5c 99       	sbic	0x0b, 4	; 11
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <uart_read_byte+0x18>
     a9a:	5b 99       	sbic	0x0b, 3	; 11
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <uart_read_byte+0x18>
     a9e:	5a 9b       	sbis	0x0b, 2	; 11
     aa0:	05 c0       	rjmp	.+10     	; 0xaac <uart_read_byte+0x22>
		*b = UDR; // Read the UDR to clean it up
     aa2:	8c b1       	in	r24, 0x0c	; 12
     aa4:	80 83       	st	Z, r24
     aa6:	2f ef       	ldi	r18, 0xFF	; 255
     aa8:	3f ef       	ldi	r19, 0xFF	; 255
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <uart_read_byte+0x2a>
		return -1;
	}

	// Read and return received data from buffer
	*b = UDR;
     aac:	8c b1       	in	r24, 0x0c	; 12
     aae:	80 83       	st	Z, r24
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
	return 0;
}
     ab4:	c9 01       	movw	r24, r18
     ab6:	08 95       	ret

00000ab8 <uart_must_read_byte>:

byte_t
uart_must_read_byte()
{
     ab8:	0f 93       	push	r16
     aba:	1f 93       	push	r17
     abc:	df 93       	push	r29
     abe:	cf 93       	push	r28
     ac0:	0f 92       	push	r0
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
	byte_t b = 0;
     ac6:	19 82       	std	Y+1, r1	; 0x01
	while (uart_read_byte(&b)); // Trying to read until success
     ac8:	8e 01       	movw	r16, r28
     aca:	0f 5f       	subi	r16, 0xFF	; 255
     acc:	1f 4f       	sbci	r17, 0xFF	; 255
     ace:	c8 01       	movw	r24, r16
     ad0:	dc df       	rcall	.-72     	; 0xa8a <uart_read_byte>
     ad2:	89 2b       	or	r24, r25
     ad4:	e1 f7       	brne	.-8      	; 0xace <uart_must_read_byte+0x16>
	return b;
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ad8:	0f 90       	pop	r0
     ada:	cf 91       	pop	r28
     adc:	df 91       	pop	r29
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	08 95       	ret

00000ae4 <uart_read_byte_async_intr_handler>:
};

static
void
uart_read_byte_async_intr_handler(void *raw_args)
{
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	df 93       	push	r29
     aec:	cf 93       	push	r28
     aee:	0f 92       	push	r0
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	8c 01       	movw	r16, r24
	assert(raw_args);
     af6:	00 97       	sbiw	r24, 0x00	; 0
     af8:	09 f4       	brne	.+2      	; 0xafc <uart_read_byte_async_intr_handler+0x18>
     afa:	be d7       	rcall	.+3964   	; 0x1a78 <abort>

	struct uart_read_byte_async_intr_handler_args *args =
		(struct uart_read_byte_async_intr_handler_args *) raw_args;
	bool must_read = (args->err == NULL);
     afc:	ff 24       	eor	r15, r15
     afe:	dc 01       	movw	r26, r24
     b00:	14 96       	adiw	r26, 0x04	; 4
     b02:	8d 91       	ld	r24, X+
     b04:	9c 91       	ld	r25, X
     b06:	15 97       	sbiw	r26, 0x05	; 5
     b08:	89 2b       	or	r24, r25
     b0a:	11 f4       	brne	.+4      	; 0xb10 <uart_read_byte_async_intr_handler+0x2c>
     b0c:	ff 24       	eor	r15, r15
     b0e:	f3 94       	inc	r15

	byte_t b = 0;
     b10:	19 82       	std	Y+1, r1	; 0x01
	int err = uart_read_byte(&b);
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	b9 df       	rcall	.-142    	; 0xa8a <uart_read_byte>
     b18:	9c 01       	movw	r18, r24
	if (err && must_read)
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	11 f0       	breq	.+4      	; 0xb22 <uart_read_byte_async_intr_handler+0x3e>
     b1e:	ff 20       	and	r15, r15
     b20:	f9 f4       	brne	.+62     	; 0xb60 <uart_read_byte_async_intr_handler+0x7c>
		return; // Try next time

	*(args->b) = b;
     b22:	d8 01       	movw	r26, r16
     b24:	ed 91       	ld	r30, X+
     b26:	fc 91       	ld	r31, X
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	80 83       	st	Z, r24
	if (!must_read)
     b2e:	ff 20       	and	r15, r15
     b30:	31 f4       	brne	.+12     	; 0xb3e <uart_read_byte_async_intr_handler+0x5a>
		*(args->err) = err;
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	ed 91       	ld	r30, X+
     b36:	fc 91       	ld	r31, X
     b38:	15 97       	sbiw	r26, 0x05	; 5
     b3a:	31 83       	std	Z+1, r19	; 0x01
     b3c:	20 83       	st	Z, r18
	if (!(args->ready == NULL))
     b3e:	d8 01       	movw	r26, r16
     b40:	12 96       	adiw	r26, 0x02	; 2
     b42:	ed 91       	ld	r30, X+
     b44:	fc 91       	ld	r31, X
     b46:	13 97       	sbiw	r26, 0x03	; 3
     b48:	30 97       	sbiw	r30, 0x00	; 0
     b4a:	11 f0       	breq	.+4      	; 0xb50 <uart_read_byte_async_intr_handler+0x6c>
		*(args->ready) = true;
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	80 83       	st	Z, r24

	// Clean up
	uart_rx_intr_handler = NULL;
     b50:	10 92 8c 01 	sts	0x018C, r1
     b54:	10 92 8b 01 	sts	0x018B, r1
	uart_rx_intr_handler_args = NULL;
     b58:	10 92 84 01 	sts	0x0184, r1
     b5c:	10 92 83 01 	sts	0x0183, r1
}
     b60:	0f 90       	pop	r0
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	08 95       	ret

00000b6e <uart_init>:

static bool uart_initialized = false;

void
uart_init(unsigned long cpu_freq, unsigned long baud_rate)
{
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	7b 01       	movw	r14, r22
     b78:	8c 01       	movw	r16, r24
	// Disable global interrupts
	cli();
     b7a:	f8 94       	cli

	assert(!uart_initialized);
     b7c:	80 91 8d 01 	lds	r24, 0x018D
     b80:	88 23       	and	r24, r24
     b82:	51 f4       	brne	.+20     	; 0xb98 <uart_init+0x2a>
	assert(cpu_freq > 0);
     b84:	e1 14       	cp	r14, r1
     b86:	f1 04       	cpc	r15, r1
     b88:	01 05       	cpc	r16, r1
     b8a:	11 05       	cpc	r17, r1
     b8c:	29 f0       	breq	.+10     	; 0xb98 <uart_init+0x2a>
	assert(baud_rate > 0);
     b8e:	21 15       	cp	r18, r1
     b90:	31 05       	cpc	r19, r1
     b92:	41 05       	cpc	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	09 f4       	brne	.+2      	; 0xb9a <uart_init+0x2c>
     b98:	6f d7       	rcall	.+3806   	; 0x1a78 <abort>

	// Set baud rate
	unsigned long baud_driver = cpu_freq / (16 * baud_rate) - 1;
     b9a:	94 e0       	ldi	r25, 0x04	; 4
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	44 1f       	adc	r20, r20
     ba2:	55 1f       	adc	r21, r21
     ba4:	9a 95       	dec	r25
     ba6:	d1 f7       	brne	.-12     	; 0xb9c <uart_init+0x2e>
     ba8:	c8 01       	movw	r24, r16
     baa:	b7 01       	movw	r22, r14
     bac:	ed d6       	rcall	.+3546   	; 0x1988 <__udivmodsi4>
     bae:	21 50       	subi	r18, 0x01	; 1
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	40 40       	sbci	r20, 0x00	; 0
     bb4:	50 40       	sbci	r21, 0x00	; 0
	UBRRL = byte_lo(baud_driver);
     bb6:	29 b9       	out	0x09, r18	; 9
	UBRRH = byte_hi(baud_driver);
     bb8:	23 2f       	mov	r18, r19
     bba:	34 2f       	mov	r19, r20
     bbc:	45 2f       	mov	r20, r21
     bbe:	55 27       	eor	r21, r21
     bc0:	20 bd       	out	0x20, r18	; 32

	// Enable receiver (we don't need transmitter for this project)
	UCSRB = (1 << RXEN)|(1 << TXEN);
     bc2:	88 e1       	ldi	r24, 0x18	; 24
     bc4:	8a b9       	out	0x0a, r24	; 10

	// Set frame format: 8data, 2 stop bit
	UCSRC = (1 << URSEL)|(1 << USBS)|(1 << UCSZ0)|(1 << UCSZ1); //|(1 << UPM1);
     bc6:	8e e8       	ldi	r24, 0x8E	; 142
     bc8:	80 bd       	out	0x20, r24	; 32

	// UART Receive Complete interrupt enabled
	UCSRB |= (1 << RXCIE); //|(1 << TXCIE);
     bca:	57 9a       	sbi	0x0a, 7	; 10

	uart_initialized = true;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	80 93 8d 01 	sts	0x018D, r24

	// Enable global interrupts
	sei();
     bd2:	78 94       	sei
}
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	08 95       	ret

00000bde <__lshrdi3>:
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	60 97       	sbiw	r28, 0x10	; 16
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	a8 2f       	mov	r26, r24
     bfa:	00 23       	and	r16, r16
     bfc:	09 f4       	brne	.+2      	; 0xc00 <__lshrdi3+0x22>
     bfe:	61 c0       	rjmp	.+194    	; 0xcc2 <__lshrdi3+0xe4>
     c00:	7e 01       	movw	r14, r28
     c02:	08 94       	sec
     c04:	e1 1c       	adc	r14, r1
     c06:	f1 1c       	adc	r15, r1
     c08:	88 e0       	ldi	r24, 0x08	; 8
     c0a:	f7 01       	movw	r30, r14
     c0c:	11 92       	st	Z+, r1
     c0e:	8a 95       	dec	r24
     c10:	e9 f7       	brne	.-6      	; 0xc0c <__lshrdi3+0x2e>
     c12:	29 83       	std	Y+1, r18	; 0x01
     c14:	3a 83       	std	Y+2, r19	; 0x02
     c16:	4b 83       	std	Y+3, r20	; 0x03
     c18:	5c 83       	std	Y+4, r21	; 0x04
     c1a:	6d 83       	std	Y+5, r22	; 0x05
     c1c:	7e 83       	std	Y+6, r23	; 0x06
     c1e:	af 83       	std	Y+7, r26	; 0x07
     c20:	98 87       	std	Y+8, r25	; 0x08
     c22:	80 e2       	ldi	r24, 0x20	; 32
     c24:	80 1b       	sub	r24, r16
     c26:	e8 2f       	mov	r30, r24
     c28:	ff 27       	eor	r31, r31
     c2a:	e7 fd       	sbrc	r30, 7
     c2c:	f0 95       	com	r31
     c2e:	4d 81       	ldd	r20, Y+5	; 0x05
     c30:	5e 81       	ldd	r21, Y+6	; 0x06
     c32:	6f 81       	ldd	r22, Y+7	; 0x07
     c34:	78 85       	ldd	r23, Y+8	; 0x08
     c36:	18 16       	cp	r1, r24
     c38:	84 f0       	brlt	.+32     	; 0xc5a <__lshrdi3+0x7c>
     c3a:	1d 86       	std	Y+13, r1	; 0x0d
     c3c:	1e 86       	std	Y+14, r1	; 0x0e
     c3e:	1f 86       	std	Y+15, r1	; 0x0f
     c40:	18 8a       	std	Y+16, r1	; 0x10
     c42:	88 27       	eor	r24, r24
     c44:	99 27       	eor	r25, r25
     c46:	8e 1b       	sub	r24, r30
     c48:	9f 0b       	sbc	r25, r31
     c4a:	04 c0       	rjmp	.+8      	; 0xc54 <__lshrdi3+0x76>
     c4c:	76 95       	lsr	r23
     c4e:	67 95       	ror	r22
     c50:	57 95       	ror	r21
     c52:	47 95       	ror	r20
     c54:	8a 95       	dec	r24
     c56:	d2 f7       	brpl	.-12     	; 0xc4c <__lshrdi3+0x6e>
     c58:	28 c0       	rjmp	.+80     	; 0xcaa <__lshrdi3+0xcc>
     c5a:	20 2f       	mov	r18, r16
     c5c:	33 27       	eor	r19, r19
     c5e:	27 fd       	sbrc	r18, 7
     c60:	30 95       	com	r19
     c62:	db 01       	movw	r26, r22
     c64:	ca 01       	movw	r24, r20
     c66:	02 2e       	mov	r0, r18
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <__lshrdi3+0x94>
     c6a:	b6 95       	lsr	r27
     c6c:	a7 95       	ror	r26
     c6e:	97 95       	ror	r25
     c70:	87 95       	ror	r24
     c72:	0a 94       	dec	r0
     c74:	d2 f7       	brpl	.-12     	; 0xc6a <__lshrdi3+0x8c>
     c76:	8d 87       	std	Y+13, r24	; 0x0d
     c78:	9e 87       	std	Y+14, r25	; 0x0e
     c7a:	af 87       	std	Y+15, r26	; 0x0f
     c7c:	b8 8b       	std	Y+16, r27	; 0x10
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <__lshrdi3+0xaa>
     c80:	44 0f       	add	r20, r20
     c82:	55 1f       	adc	r21, r21
     c84:	66 1f       	adc	r22, r22
     c86:	77 1f       	adc	r23, r23
     c88:	ea 95       	dec	r30
     c8a:	d2 f7       	brpl	.-12     	; 0xc80 <__lshrdi3+0xa2>
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	ab 81       	ldd	r26, Y+3	; 0x03
     c92:	bc 81       	ldd	r27, Y+4	; 0x04
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__lshrdi3+0xc0>
     c96:	b6 95       	lsr	r27
     c98:	a7 95       	ror	r26
     c9a:	97 95       	ror	r25
     c9c:	87 95       	ror	r24
     c9e:	2a 95       	dec	r18
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__lshrdi3+0xb8>
     ca2:	48 2b       	or	r20, r24
     ca4:	59 2b       	or	r21, r25
     ca6:	6a 2b       	or	r22, r26
     ca8:	7b 2b       	or	r23, r27
     caa:	49 87       	std	Y+9, r20	; 0x09
     cac:	5a 87       	std	Y+10, r21	; 0x0a
     cae:	6b 87       	std	Y+11, r22	; 0x0b
     cb0:	7c 87       	std	Y+12, r23	; 0x0c
     cb2:	29 85       	ldd	r18, Y+9	; 0x09
     cb4:	3a 85       	ldd	r19, Y+10	; 0x0a
     cb6:	4b 85       	ldd	r20, Y+11	; 0x0b
     cb8:	5c 85       	ldd	r21, Y+12	; 0x0c
     cba:	6d 85       	ldd	r22, Y+13	; 0x0d
     cbc:	7e 85       	ldd	r23, Y+14	; 0x0e
     cbe:	af 85       	ldd	r26, Y+15	; 0x0f
     cc0:	98 89       	ldd	r25, Y+16	; 0x10
     cc2:	8a 2f       	mov	r24, r26
     cc4:	60 96       	adiw	r28, 0x10	; 16
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	08 95       	ret

00000cdc <__udivdi3>:
     cdc:	ae e5       	ldi	r26, 0x5E	; 94
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e3 e7       	ldi	r30, 0x73	; 115
     ce2:	f6 e0       	ldi	r31, 0x06	; 6
     ce4:	92 c6       	rjmp	.+3364   	; 0x1a0a <__prologue_saves__>
     ce6:	a8 e0       	ldi	r26, 0x08	; 8
     ce8:	4e 01       	movw	r8, r28
     cea:	08 94       	sec
     cec:	81 1c       	adc	r8, r1
     cee:	91 1c       	adc	r9, r1
     cf0:	f4 01       	movw	r30, r8
     cf2:	6a 2e       	mov	r6, r26
     cf4:	11 92       	st	Z+, r1
     cf6:	6a 94       	dec	r6
     cf8:	e9 f7       	brne	.-6      	; 0xcf4 <__udivdi3+0x18>
     cfa:	29 83       	std	Y+1, r18	; 0x01
     cfc:	3a 83       	std	Y+2, r19	; 0x02
     cfe:	4b 83       	std	Y+3, r20	; 0x03
     d00:	5c 83       	std	Y+4, r21	; 0x04
     d02:	6d 83       	std	Y+5, r22	; 0x05
     d04:	7e 83       	std	Y+6, r23	; 0x06
     d06:	8f 83       	std	Y+7, r24	; 0x07
     d08:	98 87       	std	Y+8, r25	; 0x08
     d0a:	ce 01       	movw	r24, r28
     d0c:	09 96       	adiw	r24, 0x09	; 9
     d0e:	fc 01       	movw	r30, r24
     d10:	11 92       	st	Z+, r1
     d12:	aa 95       	dec	r26
     d14:	e9 f7       	brne	.-6      	; 0xd10 <__udivdi3+0x34>
     d16:	a9 86       	std	Y+9, r10	; 0x09
     d18:	ba 86       	std	Y+10, r11	; 0x0a
     d1a:	cb 86       	std	Y+11, r12	; 0x0b
     d1c:	dc 86       	std	Y+12, r13	; 0x0c
     d1e:	ed 86       	std	Y+13, r14	; 0x0d
     d20:	fe 86       	std	Y+14, r15	; 0x0e
     d22:	0f 87       	std	Y+15, r16	; 0x0f
     d24:	18 8b       	std	Y+16, r17	; 0x10
     d26:	29 84       	ldd	r2, Y+9	; 0x09
     d28:	3a 84       	ldd	r3, Y+10	; 0x0a
     d2a:	4b 84       	ldd	r4, Y+11	; 0x0b
     d2c:	5c 84       	ldd	r5, Y+12	; 0x0c
     d2e:	ed 84       	ldd	r14, Y+13	; 0x0d
     d30:	fe 84       	ldd	r15, Y+14	; 0x0e
     d32:	0f 85       	ldd	r16, Y+15	; 0x0f
     d34:	18 89       	ldd	r17, Y+16	; 0x10
     d36:	69 80       	ldd	r6, Y+1	; 0x01
     d38:	7a 80       	ldd	r7, Y+2	; 0x02
     d3a:	8b 80       	ldd	r8, Y+3	; 0x03
     d3c:	9c 80       	ldd	r9, Y+4	; 0x04
     d3e:	6d a6       	std	Y+45, r6	; 0x2d
     d40:	7e a6       	std	Y+46, r7	; 0x2e
     d42:	8f a6       	std	Y+47, r8	; 0x2f
     d44:	98 aa       	std	Y+48, r9	; 0x30
     d46:	6d 80       	ldd	r6, Y+5	; 0x05
     d48:	7e 80       	ldd	r7, Y+6	; 0x06
     d4a:	8f 80       	ldd	r8, Y+7	; 0x07
     d4c:	98 84       	ldd	r9, Y+8	; 0x08
     d4e:	e1 14       	cp	r14, r1
     d50:	f1 04       	cpc	r15, r1
     d52:	01 05       	cpc	r16, r1
     d54:	11 05       	cpc	r17, r1
     d56:	09 f0       	breq	.+2      	; 0xd5a <__udivdi3+0x7e>
     d58:	a0 c3       	rjmp	.+1856   	; 0x149a <__udivdi3+0x7be>
     d5a:	62 14       	cp	r6, r2
     d5c:	73 04       	cpc	r7, r3
     d5e:	84 04       	cpc	r8, r4
     d60:	95 04       	cpc	r9, r5
     d62:	08 f0       	brcs	.+2      	; 0xd66 <__udivdi3+0x8a>
     d64:	37 c1       	rjmp	.+622    	; 0xfd4 <__udivdi3+0x2f8>
     d66:	00 e0       	ldi	r16, 0x00	; 0
     d68:	20 16       	cp	r2, r16
     d6a:	00 e0       	ldi	r16, 0x00	; 0
     d6c:	30 06       	cpc	r3, r16
     d6e:	01 e0       	ldi	r16, 0x01	; 1
     d70:	40 06       	cpc	r4, r16
     d72:	00 e0       	ldi	r16, 0x00	; 0
     d74:	50 06       	cpc	r5, r16
     d76:	88 f4       	brcc	.+34     	; 0xd9a <__udivdi3+0xbe>
     d78:	1f ef       	ldi	r17, 0xFF	; 255
     d7a:	21 16       	cp	r2, r17
     d7c:	31 04       	cpc	r3, r1
     d7e:	41 04       	cpc	r4, r1
     d80:	51 04       	cpc	r5, r1
     d82:	39 f0       	breq	.+14     	; 0xd92 <__udivdi3+0xb6>
     d84:	30 f0       	brcs	.+12     	; 0xd92 <__udivdi3+0xb6>
     d86:	48 e0       	ldi	r20, 0x08	; 8
     d88:	e4 2e       	mov	r14, r20
     d8a:	f1 2c       	mov	r15, r1
     d8c:	01 2d       	mov	r16, r1
     d8e:	11 2d       	mov	r17, r1
     d90:	18 c0       	rjmp	.+48     	; 0xdc2 <__udivdi3+0xe6>
     d92:	ee 24       	eor	r14, r14
     d94:	ff 24       	eor	r15, r15
     d96:	87 01       	movw	r16, r14
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <__udivdi3+0xe6>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	22 16       	cp	r2, r18
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	32 06       	cpc	r3, r18
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	42 06       	cpc	r4, r18
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	52 06       	cpc	r5, r18
     daa:	30 f0       	brcs	.+12     	; 0xdb8 <__udivdi3+0xdc>
     dac:	38 e1       	ldi	r19, 0x18	; 24
     dae:	e3 2e       	mov	r14, r19
     db0:	f1 2c       	mov	r15, r1
     db2:	01 2d       	mov	r16, r1
     db4:	11 2d       	mov	r17, r1
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <__udivdi3+0xe6>
     db8:	20 e1       	ldi	r18, 0x10	; 16
     dba:	e2 2e       	mov	r14, r18
     dbc:	f1 2c       	mov	r15, r1
     dbe:	01 2d       	mov	r16, r1
     dc0:	11 2d       	mov	r17, r1
     dc2:	d2 01       	movw	r26, r4
     dc4:	c1 01       	movw	r24, r2
     dc6:	0e 2c       	mov	r0, r14
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <__udivdi3+0xf6>
     dca:	b6 95       	lsr	r27
     dcc:	a7 95       	ror	r26
     dce:	97 95       	ror	r25
     dd0:	87 95       	ror	r24
     dd2:	0a 94       	dec	r0
     dd4:	d2 f7       	brpl	.-12     	; 0xdca <__udivdi3+0xee>
     dd6:	80 5a       	subi	r24, 0xA0	; 160
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	dc 01       	movw	r26, r24
     ddc:	2c 91       	ld	r18, X
     dde:	80 e2       	ldi	r24, 0x20	; 32
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	a0 e0       	ldi	r26, 0x00	; 0
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	8e 19       	sub	r24, r14
     de8:	9f 09       	sbc	r25, r15
     dea:	a0 0b       	sbc	r26, r16
     dec:	b1 0b       	sbc	r27, r17
     dee:	7c 01       	movw	r14, r24
     df0:	8d 01       	movw	r16, r26
     df2:	e2 1a       	sub	r14, r18
     df4:	f1 08       	sbc	r15, r1
     df6:	01 09       	sbc	r16, r1
     df8:	11 09       	sbc	r17, r1
     dfa:	e1 14       	cp	r14, r1
     dfc:	f1 04       	cpc	r15, r1
     dfe:	01 05       	cpc	r16, r1
     e00:	11 05       	cpc	r17, r1
     e02:	a1 f1       	breq	.+104    	; 0xe6c <__udivdi3+0x190>
     e04:	0e 2c       	mov	r0, r14
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <__udivdi3+0x134>
     e08:	22 0c       	add	r2, r2
     e0a:	33 1c       	adc	r3, r3
     e0c:	44 1c       	adc	r4, r4
     e0e:	55 1c       	adc	r5, r5
     e10:	0a 94       	dec	r0
     e12:	d2 f7       	brpl	.-12     	; 0xe08 <__udivdi3+0x12c>
     e14:	a4 01       	movw	r20, r8
     e16:	93 01       	movw	r18, r6
     e18:	0e 2c       	mov	r0, r14
     e1a:	04 c0       	rjmp	.+8      	; 0xe24 <__udivdi3+0x148>
     e1c:	22 0f       	add	r18, r18
     e1e:	33 1f       	adc	r19, r19
     e20:	44 1f       	adc	r20, r20
     e22:	55 1f       	adc	r21, r21
     e24:	0a 94       	dec	r0
     e26:	d2 f7       	brpl	.-12     	; 0xe1c <__udivdi3+0x140>
     e28:	80 e2       	ldi	r24, 0x20	; 32
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	8e 19       	sub	r24, r14
     e2e:	9f 09       	sbc	r25, r15
     e30:	6d a4       	ldd	r6, Y+45	; 0x2d
     e32:	7e a4       	ldd	r7, Y+46	; 0x2e
     e34:	8f a4       	ldd	r8, Y+47	; 0x2f
     e36:	98 a8       	ldd	r9, Y+48	; 0x30
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <__udivdi3+0x166>
     e3a:	96 94       	lsr	r9
     e3c:	87 94       	ror	r8
     e3e:	77 94       	ror	r7
     e40:	67 94       	ror	r6
     e42:	8a 95       	dec	r24
     e44:	d2 f7       	brpl	.-12     	; 0xe3a <__udivdi3+0x15e>
     e46:	62 2a       	or	r6, r18
     e48:	73 2a       	or	r7, r19
     e4a:	84 2a       	or	r8, r20
     e4c:	95 2a       	or	r9, r21
     e4e:	ad a4       	ldd	r10, Y+45	; 0x2d
     e50:	be a4       	ldd	r11, Y+46	; 0x2e
     e52:	cf a4       	ldd	r12, Y+47	; 0x2f
     e54:	d8 a8       	ldd	r13, Y+48	; 0x30
     e56:	04 c0       	rjmp	.+8      	; 0xe60 <__udivdi3+0x184>
     e58:	aa 0c       	add	r10, r10
     e5a:	bb 1c       	adc	r11, r11
     e5c:	cc 1c       	adc	r12, r12
     e5e:	dd 1c       	adc	r13, r13
     e60:	ea 94       	dec	r14
     e62:	d2 f7       	brpl	.-12     	; 0xe58 <__udivdi3+0x17c>
     e64:	ad a6       	std	Y+45, r10	; 0x2d
     e66:	be a6       	std	Y+46, r11	; 0x2e
     e68:	cf a6       	std	Y+47, r12	; 0x2f
     e6a:	d8 aa       	std	Y+48, r13	; 0x30
     e6c:	62 01       	movw	r12, r4
     e6e:	ee 24       	eor	r14, r14
     e70:	ff 24       	eor	r15, r15
     e72:	cd aa       	std	Y+53, r12	; 0x35
     e74:	de aa       	std	Y+54, r13	; 0x36
     e76:	ef aa       	std	Y+55, r14	; 0x37
     e78:	f8 ae       	std	Y+56, r15	; 0x38
     e7a:	92 01       	movw	r18, r4
     e7c:	81 01       	movw	r16, r2
     e7e:	20 70       	andi	r18, 0x00	; 0
     e80:	30 70       	andi	r19, 0x00	; 0
     e82:	09 af       	std	Y+57, r16	; 0x39
     e84:	1a af       	std	Y+58, r17	; 0x3a
     e86:	2b af       	std	Y+59, r18	; 0x3b
     e88:	3c af       	std	Y+60, r19	; 0x3c
     e8a:	c4 01       	movw	r24, r8
     e8c:	b3 01       	movw	r22, r6
     e8e:	a7 01       	movw	r20, r14
     e90:	96 01       	movw	r18, r12
     e92:	7a d5       	rcall	.+2804   	; 0x1988 <__udivmodsi4>
     e94:	7b 01       	movw	r14, r22
     e96:	8c 01       	movw	r16, r24
     e98:	c4 01       	movw	r24, r8
     e9a:	b3 01       	movw	r22, r6
     e9c:	2d a9       	ldd	r18, Y+53	; 0x35
     e9e:	3e a9       	ldd	r19, Y+54	; 0x36
     ea0:	4f a9       	ldd	r20, Y+55	; 0x37
     ea2:	58 ad       	ldd	r21, Y+56	; 0x38
     ea4:	71 d5       	rcall	.+2786   	; 0x1988 <__udivmodsi4>
     ea6:	c9 01       	movw	r24, r18
     ea8:	da 01       	movw	r26, r20
     eaa:	3c 01       	movw	r6, r24
     eac:	4d 01       	movw	r8, r26
     eae:	c4 01       	movw	r24, r8
     eb0:	b3 01       	movw	r22, r6
     eb2:	29 ad       	ldd	r18, Y+57	; 0x39
     eb4:	3a ad       	ldd	r19, Y+58	; 0x3a
     eb6:	4b ad       	ldd	r20, Y+59	; 0x3b
     eb8:	5c ad       	ldd	r21, Y+60	; 0x3c
     eba:	88 d5       	rcall	.+2832   	; 0x19cc <__mulsi3>
     ebc:	9b 01       	movw	r18, r22
     ebe:	ac 01       	movw	r20, r24
     ec0:	87 01       	movw	r16, r14
     ec2:	ff 24       	eor	r15, r15
     ec4:	ee 24       	eor	r14, r14
     ec6:	ad a4       	ldd	r10, Y+45	; 0x2d
     ec8:	be a4       	ldd	r11, Y+46	; 0x2e
     eca:	cf a4       	ldd	r12, Y+47	; 0x2f
     ecc:	d8 a8       	ldd	r13, Y+48	; 0x30
     ece:	c6 01       	movw	r24, r12
     ed0:	aa 27       	eor	r26, r26
     ed2:	bb 27       	eor	r27, r27
     ed4:	57 01       	movw	r10, r14
     ed6:	68 01       	movw	r12, r16
     ed8:	a8 2a       	or	r10, r24
     eda:	b9 2a       	or	r11, r25
     edc:	ca 2a       	or	r12, r26
     ede:	db 2a       	or	r13, r27
     ee0:	a2 16       	cp	r10, r18
     ee2:	b3 06       	cpc	r11, r19
     ee4:	c4 06       	cpc	r12, r20
     ee6:	d5 06       	cpc	r13, r21
     ee8:	e0 f4       	brcc	.+56     	; 0xf22 <__udivdi3+0x246>
     eea:	08 94       	sec
     eec:	61 08       	sbc	r6, r1
     eee:	71 08       	sbc	r7, r1
     ef0:	81 08       	sbc	r8, r1
     ef2:	91 08       	sbc	r9, r1
     ef4:	a2 0c       	add	r10, r2
     ef6:	b3 1c       	adc	r11, r3
     ef8:	c4 1c       	adc	r12, r4
     efa:	d5 1c       	adc	r13, r5
     efc:	a2 14       	cp	r10, r2
     efe:	b3 04       	cpc	r11, r3
     f00:	c4 04       	cpc	r12, r4
     f02:	d5 04       	cpc	r13, r5
     f04:	70 f0       	brcs	.+28     	; 0xf22 <__udivdi3+0x246>
     f06:	a2 16       	cp	r10, r18
     f08:	b3 06       	cpc	r11, r19
     f0a:	c4 06       	cpc	r12, r20
     f0c:	d5 06       	cpc	r13, r21
     f0e:	48 f4       	brcc	.+18     	; 0xf22 <__udivdi3+0x246>
     f10:	08 94       	sec
     f12:	61 08       	sbc	r6, r1
     f14:	71 08       	sbc	r7, r1
     f16:	81 08       	sbc	r8, r1
     f18:	91 08       	sbc	r9, r1
     f1a:	a2 0c       	add	r10, r2
     f1c:	b3 1c       	adc	r11, r3
     f1e:	c4 1c       	adc	r12, r4
     f20:	d5 1c       	adc	r13, r5
     f22:	a2 1a       	sub	r10, r18
     f24:	b3 0a       	sbc	r11, r19
     f26:	c4 0a       	sbc	r12, r20
     f28:	d5 0a       	sbc	r13, r21
     f2a:	c6 01       	movw	r24, r12
     f2c:	b5 01       	movw	r22, r10
     f2e:	2d a9       	ldd	r18, Y+53	; 0x35
     f30:	3e a9       	ldd	r19, Y+54	; 0x36
     f32:	4f a9       	ldd	r20, Y+55	; 0x37
     f34:	58 ad       	ldd	r21, Y+56	; 0x38
     f36:	28 d5       	rcall	.+2640   	; 0x1988 <__udivmodsi4>
     f38:	7b 01       	movw	r14, r22
     f3a:	8c 01       	movw	r16, r24
     f3c:	c6 01       	movw	r24, r12
     f3e:	b5 01       	movw	r22, r10
     f40:	2d a9       	ldd	r18, Y+53	; 0x35
     f42:	3e a9       	ldd	r19, Y+54	; 0x36
     f44:	4f a9       	ldd	r20, Y+55	; 0x37
     f46:	58 ad       	ldd	r21, Y+56	; 0x38
     f48:	1f d5       	rcall	.+2622   	; 0x1988 <__udivmodsi4>
     f4a:	c9 01       	movw	r24, r18
     f4c:	da 01       	movw	r26, r20
     f4e:	5c 01       	movw	r10, r24
     f50:	6d 01       	movw	r12, r26
     f52:	c6 01       	movw	r24, r12
     f54:	b5 01       	movw	r22, r10
     f56:	29 ad       	ldd	r18, Y+57	; 0x39
     f58:	3a ad       	ldd	r19, Y+58	; 0x3a
     f5a:	4b ad       	ldd	r20, Y+59	; 0x3b
     f5c:	5c ad       	ldd	r21, Y+60	; 0x3c
     f5e:	36 d5       	rcall	.+2668   	; 0x19cc <__mulsi3>
     f60:	9b 01       	movw	r18, r22
     f62:	ac 01       	movw	r20, r24
     f64:	87 01       	movw	r16, r14
     f66:	ff 24       	eor	r15, r15
     f68:	ee 24       	eor	r14, r14
     f6a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f6c:	9e a5       	ldd	r25, Y+46	; 0x2e
     f6e:	af a5       	ldd	r26, Y+47	; 0x2f
     f70:	b8 a9       	ldd	r27, Y+48	; 0x30
     f72:	a0 70       	andi	r26, 0x00	; 0
     f74:	b0 70       	andi	r27, 0x00	; 0
     f76:	e8 2a       	or	r14, r24
     f78:	f9 2a       	or	r15, r25
     f7a:	0a 2b       	or	r16, r26
     f7c:	1b 2b       	or	r17, r27
     f7e:	e2 16       	cp	r14, r18
     f80:	f3 06       	cpc	r15, r19
     f82:	04 07       	cpc	r16, r20
     f84:	15 07       	cpc	r17, r21
     f86:	c0 f4       	brcc	.+48     	; 0xfb8 <__udivdi3+0x2dc>
     f88:	08 94       	sec
     f8a:	a1 08       	sbc	r10, r1
     f8c:	b1 08       	sbc	r11, r1
     f8e:	c1 08       	sbc	r12, r1
     f90:	d1 08       	sbc	r13, r1
     f92:	e2 0c       	add	r14, r2
     f94:	f3 1c       	adc	r15, r3
     f96:	04 1d       	adc	r16, r4
     f98:	15 1d       	adc	r17, r5
     f9a:	e2 14       	cp	r14, r2
     f9c:	f3 04       	cpc	r15, r3
     f9e:	04 05       	cpc	r16, r4
     fa0:	15 05       	cpc	r17, r5
     fa2:	50 f0       	brcs	.+20     	; 0xfb8 <__udivdi3+0x2dc>
     fa4:	e2 16       	cp	r14, r18
     fa6:	f3 06       	cpc	r15, r19
     fa8:	04 07       	cpc	r16, r20
     faa:	15 07       	cpc	r17, r21
     fac:	28 f4       	brcc	.+10     	; 0xfb8 <__udivdi3+0x2dc>
     fae:	08 94       	sec
     fb0:	a1 08       	sbc	r10, r1
     fb2:	b1 08       	sbc	r11, r1
     fb4:	c1 08       	sbc	r12, r1
     fb6:	d1 08       	sbc	r13, r1
     fb8:	d3 01       	movw	r26, r6
     fba:	99 27       	eor	r25, r25
     fbc:	88 27       	eor	r24, r24
     fbe:	86 01       	movw	r16, r12
     fc0:	75 01       	movw	r14, r10
     fc2:	e8 2a       	or	r14, r24
     fc4:	f9 2a       	or	r15, r25
     fc6:	0a 2b       	or	r16, r26
     fc8:	1b 2b       	or	r17, r27
     fca:	e9 aa       	std	Y+49, r14	; 0x31
     fcc:	fa aa       	std	Y+50, r15	; 0x32
     fce:	0b ab       	std	Y+51, r16	; 0x33
     fd0:	1c ab       	std	Y+52, r17	; 0x34
     fd2:	b8 c4       	rjmp	.+2416   	; 0x1944 <__udivdi3+0xc68>
     fd4:	21 14       	cp	r2, r1
     fd6:	31 04       	cpc	r3, r1
     fd8:	41 04       	cpc	r4, r1
     fda:	51 04       	cpc	r5, r1
     fdc:	69 f4       	brne	.+26     	; 0xff8 <__udivdi3+0x31c>
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	50 e0       	ldi	r21, 0x00	; 0
     fee:	cc d4       	rcall	.+2456   	; 0x1988 <__udivmodsi4>
     ff0:	c9 01       	movw	r24, r18
     ff2:	da 01       	movw	r26, r20
     ff4:	1c 01       	movw	r2, r24
     ff6:	2d 01       	movw	r4, r26
     ff8:	00 e0       	ldi	r16, 0x00	; 0
     ffa:	20 16       	cp	r2, r16
     ffc:	00 e0       	ldi	r16, 0x00	; 0
     ffe:	30 06       	cpc	r3, r16
    1000:	01 e0       	ldi	r16, 0x01	; 1
    1002:	40 06       	cpc	r4, r16
    1004:	00 e0       	ldi	r16, 0x00	; 0
    1006:	50 06       	cpc	r5, r16
    1008:	88 f4       	brcc	.+34     	; 0x102c <__udivdi3+0x350>
    100a:	1f ef       	ldi	r17, 0xFF	; 255
    100c:	21 16       	cp	r2, r17
    100e:	31 04       	cpc	r3, r1
    1010:	41 04       	cpc	r4, r1
    1012:	51 04       	cpc	r5, r1
    1014:	31 f0       	breq	.+12     	; 0x1022 <__udivdi3+0x346>
    1016:	28 f0       	brcs	.+10     	; 0x1022 <__udivdi3+0x346>
    1018:	48 e0       	ldi	r20, 0x08	; 8
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	17 c0       	rjmp	.+46     	; 0x1050 <__udivdi3+0x374>
    1022:	40 e0       	ldi	r20, 0x00	; 0
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	12 c0       	rjmp	.+36     	; 0x1050 <__udivdi3+0x374>
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	22 16       	cp	r2, r18
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	32 06       	cpc	r3, r18
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	42 06       	cpc	r4, r18
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	52 06       	cpc	r5, r18
    103c:	28 f0       	brcs	.+10     	; 0x1048 <__udivdi3+0x36c>
    103e:	48 e1       	ldi	r20, 0x18	; 24
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__udivdi3+0x374>
    1048:	40 e1       	ldi	r20, 0x10	; 16
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	d2 01       	movw	r26, r4
    1052:	c1 01       	movw	r24, r2
    1054:	04 2e       	mov	r0, r20
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <__udivdi3+0x384>
    1058:	b6 95       	lsr	r27
    105a:	a7 95       	ror	r26
    105c:	97 95       	ror	r25
    105e:	87 95       	ror	r24
    1060:	0a 94       	dec	r0
    1062:	d2 f7       	brpl	.-12     	; 0x1058 <__udivdi3+0x37c>
    1064:	80 5a       	subi	r24, 0xA0	; 160
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	dc 01       	movw	r26, r24
    106a:	2c 91       	ld	r18, X
    106c:	e0 e2       	ldi	r30, 0x20	; 32
    106e:	ee 2e       	mov	r14, r30
    1070:	f1 2c       	mov	r15, r1
    1072:	01 2d       	mov	r16, r1
    1074:	11 2d       	mov	r17, r1
    1076:	d8 01       	movw	r26, r16
    1078:	c7 01       	movw	r24, r14
    107a:	84 1b       	sub	r24, r20
    107c:	95 0b       	sbc	r25, r21
    107e:	a6 0b       	sbc	r26, r22
    1080:	b7 0b       	sbc	r27, r23
    1082:	82 1b       	sub	r24, r18
    1084:	91 09       	sbc	r25, r1
    1086:	a1 09       	sbc	r26, r1
    1088:	b1 09       	sbc	r27, r1
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	a1 05       	cpc	r26, r1
    108e:	b1 05       	cpc	r27, r1
    1090:	61 f4       	brne	.+24     	; 0x10aa <__udivdi3+0x3ce>
    1092:	64 01       	movw	r12, r8
    1094:	53 01       	movw	r10, r6
    1096:	a2 18       	sub	r10, r2
    1098:	b3 08       	sbc	r11, r3
    109a:	c4 08       	sbc	r12, r4
    109c:	d5 08       	sbc	r13, r5
    109e:	31 e0       	ldi	r19, 0x01	; 1
    10a0:	63 2e       	mov	r6, r19
    10a2:	71 2c       	mov	r7, r1
    10a4:	81 2c       	mov	r8, r1
    10a6:	91 2c       	mov	r9, r1
    10a8:	18 c1       	rjmp	.+560    	; 0x12da <__udivdi3+0x5fe>
    10aa:	6f 96       	adiw	r28, 0x1f	; 31
    10ac:	8f af       	std	Y+63, r24	; 0x3f
    10ae:	6f 97       	sbiw	r28, 0x1f	; 31
    10b0:	08 2e       	mov	r0, r24
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <__udivdi3+0x3e0>
    10b4:	22 0c       	add	r2, r2
    10b6:	33 1c       	adc	r3, r3
    10b8:	44 1c       	adc	r4, r4
    10ba:	55 1c       	adc	r5, r5
    10bc:	0a 94       	dec	r0
    10be:	d2 f7       	brpl	.-12     	; 0x10b4 <__udivdi3+0x3d8>
    10c0:	ee 2d       	mov	r30, r14
    10c2:	e8 1b       	sub	r30, r24
    10c4:	64 01       	movw	r12, r8
    10c6:	53 01       	movw	r10, r6
    10c8:	0e 2e       	mov	r0, r30
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <__udivdi3+0x3f8>
    10cc:	d6 94       	lsr	r13
    10ce:	c7 94       	ror	r12
    10d0:	b7 94       	ror	r11
    10d2:	a7 94       	ror	r10
    10d4:	0a 94       	dec	r0
    10d6:	d2 f7       	brpl	.-12     	; 0x10cc <__udivdi3+0x3f0>
    10d8:	a4 01       	movw	r20, r8
    10da:	93 01       	movw	r18, r6
    10dc:	6f 96       	adiw	r28, 0x1f	; 31
    10de:	0f ac       	ldd	r0, Y+63	; 0x3f
    10e0:	6f 97       	sbiw	r28, 0x1f	; 31
    10e2:	04 c0       	rjmp	.+8      	; 0x10ec <__udivdi3+0x410>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	0a 94       	dec	r0
    10ee:	d2 f7       	brpl	.-12     	; 0x10e4 <__udivdi3+0x408>
    10f0:	6d a4       	ldd	r6, Y+45	; 0x2d
    10f2:	7e a4       	ldd	r7, Y+46	; 0x2e
    10f4:	8f a4       	ldd	r8, Y+47	; 0x2f
    10f6:	98 a8       	ldd	r9, Y+48	; 0x30
    10f8:	0e 2e       	mov	r0, r30
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <__udivdi3+0x428>
    10fc:	96 94       	lsr	r9
    10fe:	87 94       	ror	r8
    1100:	77 94       	ror	r7
    1102:	67 94       	ror	r6
    1104:	0a 94       	dec	r0
    1106:	d2 f7       	brpl	.-12     	; 0x10fc <__udivdi3+0x420>
    1108:	84 01       	movw	r16, r8
    110a:	73 01       	movw	r14, r6
    110c:	e2 2a       	or	r14, r18
    110e:	f3 2a       	or	r15, r19
    1110:	04 2b       	or	r16, r20
    1112:	15 2b       	or	r17, r21
    1114:	e9 a6       	std	Y+41, r14	; 0x29
    1116:	fa a6       	std	Y+42, r15	; 0x2a
    1118:	0b a7       	std	Y+43, r16	; 0x2b
    111a:	1c a7       	std	Y+44, r17	; 0x2c
    111c:	32 01       	movw	r6, r4
    111e:	88 24       	eor	r8, r8
    1120:	99 24       	eor	r9, r9
    1122:	92 01       	movw	r18, r4
    1124:	81 01       	movw	r16, r2
    1126:	20 70       	andi	r18, 0x00	; 0
    1128:	30 70       	andi	r19, 0x00	; 0
    112a:	21 96       	adiw	r28, 0x01	; 1
    112c:	0c af       	std	Y+60, r16	; 0x3c
    112e:	1d af       	std	Y+61, r17	; 0x3d
    1130:	2e af       	std	Y+62, r18	; 0x3e
    1132:	3f af       	std	Y+63, r19	; 0x3f
    1134:	21 97       	sbiw	r28, 0x01	; 1
    1136:	c6 01       	movw	r24, r12
    1138:	b5 01       	movw	r22, r10
    113a:	a4 01       	movw	r20, r8
    113c:	93 01       	movw	r18, r6
    113e:	24 d4       	rcall	.+2120   	; 0x1988 <__udivmodsi4>
    1140:	7b 01       	movw	r14, r22
    1142:	8c 01       	movw	r16, r24
    1144:	c6 01       	movw	r24, r12
    1146:	b5 01       	movw	r22, r10
    1148:	a4 01       	movw	r20, r8
    114a:	93 01       	movw	r18, r6
    114c:	1d d4       	rcall	.+2106   	; 0x1988 <__udivmodsi4>
    114e:	c9 01       	movw	r24, r18
    1150:	da 01       	movw	r26, r20
    1152:	25 96       	adiw	r28, 0x05	; 5
    1154:	8c af       	std	Y+60, r24	; 0x3c
    1156:	9d af       	std	Y+61, r25	; 0x3d
    1158:	ae af       	std	Y+62, r26	; 0x3e
    115a:	bf af       	std	Y+63, r27	; 0x3f
    115c:	25 97       	sbiw	r28, 0x05	; 5
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	21 96       	adiw	r28, 0x01	; 1
    1164:	2c ad       	ldd	r18, Y+60	; 0x3c
    1166:	3d ad       	ldd	r19, Y+61	; 0x3d
    1168:	4e ad       	ldd	r20, Y+62	; 0x3e
    116a:	5f ad       	ldd	r21, Y+63	; 0x3f
    116c:	21 97       	sbiw	r28, 0x01	; 1
    116e:	2e d4       	rcall	.+2140   	; 0x19cc <__mulsi3>
    1170:	9b 01       	movw	r18, r22
    1172:	ac 01       	movw	r20, r24
    1174:	87 01       	movw	r16, r14
    1176:	ff 24       	eor	r15, r15
    1178:	ee 24       	eor	r14, r14
    117a:	a9 a4       	ldd	r10, Y+41	; 0x29
    117c:	ba a4       	ldd	r11, Y+42	; 0x2a
    117e:	cb a4       	ldd	r12, Y+43	; 0x2b
    1180:	dc a4       	ldd	r13, Y+44	; 0x2c
    1182:	c6 01       	movw	r24, r12
    1184:	aa 27       	eor	r26, r26
    1186:	bb 27       	eor	r27, r27
    1188:	5c 01       	movw	r10, r24
    118a:	6d 01       	movw	r12, r26
    118c:	ae 28       	or	r10, r14
    118e:	bf 28       	or	r11, r15
    1190:	c0 2a       	or	r12, r16
    1192:	d1 2a       	or	r13, r17
    1194:	a2 16       	cp	r10, r18
    1196:	b3 06       	cpc	r11, r19
    1198:	c4 06       	cpc	r12, r20
    119a:	d5 06       	cpc	r13, r21
    119c:	60 f5       	brcc	.+88     	; 0x11f6 <__udivdi3+0x51a>
    119e:	25 96       	adiw	r28, 0x05	; 5
    11a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    11a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    11a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    11a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    11a8:	25 97       	sbiw	r28, 0x05	; 5
    11aa:	61 50       	subi	r22, 0x01	; 1
    11ac:	70 40       	sbci	r23, 0x00	; 0
    11ae:	80 40       	sbci	r24, 0x00	; 0
    11b0:	90 40       	sbci	r25, 0x00	; 0
    11b2:	25 96       	adiw	r28, 0x05	; 5
    11b4:	6c af       	std	Y+60, r22	; 0x3c
    11b6:	7d af       	std	Y+61, r23	; 0x3d
    11b8:	8e af       	std	Y+62, r24	; 0x3e
    11ba:	9f af       	std	Y+63, r25	; 0x3f
    11bc:	25 97       	sbiw	r28, 0x05	; 5
    11be:	a2 0c       	add	r10, r2
    11c0:	b3 1c       	adc	r11, r3
    11c2:	c4 1c       	adc	r12, r4
    11c4:	d5 1c       	adc	r13, r5
    11c6:	a2 14       	cp	r10, r2
    11c8:	b3 04       	cpc	r11, r3
    11ca:	c4 04       	cpc	r12, r4
    11cc:	d5 04       	cpc	r13, r5
    11ce:	98 f0       	brcs	.+38     	; 0x11f6 <__udivdi3+0x51a>
    11d0:	a2 16       	cp	r10, r18
    11d2:	b3 06       	cpc	r11, r19
    11d4:	c4 06       	cpc	r12, r20
    11d6:	d5 06       	cpc	r13, r21
    11d8:	70 f4       	brcc	.+28     	; 0x11f6 <__udivdi3+0x51a>
    11da:	61 50       	subi	r22, 0x01	; 1
    11dc:	70 40       	sbci	r23, 0x00	; 0
    11de:	80 40       	sbci	r24, 0x00	; 0
    11e0:	90 40       	sbci	r25, 0x00	; 0
    11e2:	25 96       	adiw	r28, 0x05	; 5
    11e4:	6c af       	std	Y+60, r22	; 0x3c
    11e6:	7d af       	std	Y+61, r23	; 0x3d
    11e8:	8e af       	std	Y+62, r24	; 0x3e
    11ea:	9f af       	std	Y+63, r25	; 0x3f
    11ec:	25 97       	sbiw	r28, 0x05	; 5
    11ee:	a2 0c       	add	r10, r2
    11f0:	b3 1c       	adc	r11, r3
    11f2:	c4 1c       	adc	r12, r4
    11f4:	d5 1c       	adc	r13, r5
    11f6:	a2 1a       	sub	r10, r18
    11f8:	b3 0a       	sbc	r11, r19
    11fa:	c4 0a       	sbc	r12, r20
    11fc:	d5 0a       	sbc	r13, r21
    11fe:	c6 01       	movw	r24, r12
    1200:	b5 01       	movw	r22, r10
    1202:	a4 01       	movw	r20, r8
    1204:	93 01       	movw	r18, r6
    1206:	c0 d3       	rcall	.+1920   	; 0x1988 <__udivmodsi4>
    1208:	7b 01       	movw	r14, r22
    120a:	8c 01       	movw	r16, r24
    120c:	c6 01       	movw	r24, r12
    120e:	b5 01       	movw	r22, r10
    1210:	a4 01       	movw	r20, r8
    1212:	93 01       	movw	r18, r6
    1214:	b9 d3       	rcall	.+1906   	; 0x1988 <__udivmodsi4>
    1216:	c9 01       	movw	r24, r18
    1218:	da 01       	movw	r26, r20
    121a:	3c 01       	movw	r6, r24
    121c:	4d 01       	movw	r8, r26
    121e:	c4 01       	movw	r24, r8
    1220:	b3 01       	movw	r22, r6
    1222:	21 96       	adiw	r28, 0x01	; 1
    1224:	2c ad       	ldd	r18, Y+60	; 0x3c
    1226:	3d ad       	ldd	r19, Y+61	; 0x3d
    1228:	4e ad       	ldd	r20, Y+62	; 0x3e
    122a:	5f ad       	ldd	r21, Y+63	; 0x3f
    122c:	21 97       	sbiw	r28, 0x01	; 1
    122e:	ce d3       	rcall	.+1948   	; 0x19cc <__mulsi3>
    1230:	9b 01       	movw	r18, r22
    1232:	ac 01       	movw	r20, r24
    1234:	87 01       	movw	r16, r14
    1236:	ff 24       	eor	r15, r15
    1238:	ee 24       	eor	r14, r14
    123a:	89 a5       	ldd	r24, Y+41	; 0x29
    123c:	9a a5       	ldd	r25, Y+42	; 0x2a
    123e:	ab a5       	ldd	r26, Y+43	; 0x2b
    1240:	bc a5       	ldd	r27, Y+44	; 0x2c
    1242:	a0 70       	andi	r26, 0x00	; 0
    1244:	b0 70       	andi	r27, 0x00	; 0
    1246:	57 01       	movw	r10, r14
    1248:	68 01       	movw	r12, r16
    124a:	a8 2a       	or	r10, r24
    124c:	b9 2a       	or	r11, r25
    124e:	ca 2a       	or	r12, r26
    1250:	db 2a       	or	r13, r27
    1252:	a2 16       	cp	r10, r18
    1254:	b3 06       	cpc	r11, r19
    1256:	c4 06       	cpc	r12, r20
    1258:	d5 06       	cpc	r13, r21
    125a:	e0 f4       	brcc	.+56     	; 0x1294 <__udivdi3+0x5b8>
    125c:	08 94       	sec
    125e:	61 08       	sbc	r6, r1
    1260:	71 08       	sbc	r7, r1
    1262:	81 08       	sbc	r8, r1
    1264:	91 08       	sbc	r9, r1
    1266:	a2 0c       	add	r10, r2
    1268:	b3 1c       	adc	r11, r3
    126a:	c4 1c       	adc	r12, r4
    126c:	d5 1c       	adc	r13, r5
    126e:	a2 14       	cp	r10, r2
    1270:	b3 04       	cpc	r11, r3
    1272:	c4 04       	cpc	r12, r4
    1274:	d5 04       	cpc	r13, r5
    1276:	70 f0       	brcs	.+28     	; 0x1294 <__udivdi3+0x5b8>
    1278:	a2 16       	cp	r10, r18
    127a:	b3 06       	cpc	r11, r19
    127c:	c4 06       	cpc	r12, r20
    127e:	d5 06       	cpc	r13, r21
    1280:	48 f4       	brcc	.+18     	; 0x1294 <__udivdi3+0x5b8>
    1282:	08 94       	sec
    1284:	61 08       	sbc	r6, r1
    1286:	71 08       	sbc	r7, r1
    1288:	81 08       	sbc	r8, r1
    128a:	91 08       	sbc	r9, r1
    128c:	a2 0c       	add	r10, r2
    128e:	b3 1c       	adc	r11, r3
    1290:	c4 1c       	adc	r12, r4
    1292:	d5 1c       	adc	r13, r5
    1294:	8d a5       	ldd	r24, Y+45	; 0x2d
    1296:	9e a5       	ldd	r25, Y+46	; 0x2e
    1298:	af a5       	ldd	r26, Y+47	; 0x2f
    129a:	b8 a9       	ldd	r27, Y+48	; 0x30
    129c:	6f 96       	adiw	r28, 0x1f	; 31
    129e:	0f ac       	ldd	r0, Y+63	; 0x3f
    12a0:	6f 97       	sbiw	r28, 0x1f	; 31
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__udivdi3+0x5d0>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	aa 1f       	adc	r26, r26
    12aa:	bb 1f       	adc	r27, r27
    12ac:	0a 94       	dec	r0
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__udivdi3+0x5c8>
    12b0:	8d a7       	std	Y+45, r24	; 0x2d
    12b2:	9e a7       	std	Y+46, r25	; 0x2e
    12b4:	af a7       	std	Y+47, r26	; 0x2f
    12b6:	b8 ab       	std	Y+48, r27	; 0x30
    12b8:	a2 1a       	sub	r10, r18
    12ba:	b3 0a       	sbc	r11, r19
    12bc:	c4 0a       	sbc	r12, r20
    12be:	d5 0a       	sbc	r13, r21
    12c0:	25 96       	adiw	r28, 0x05	; 5
    12c2:	ec ac       	ldd	r14, Y+60	; 0x3c
    12c4:	fd ac       	ldd	r15, Y+61	; 0x3d
    12c6:	0e ad       	ldd	r16, Y+62	; 0x3e
    12c8:	1f ad       	ldd	r17, Y+63	; 0x3f
    12ca:	25 97       	sbiw	r28, 0x05	; 5
    12cc:	d7 01       	movw	r26, r14
    12ce:	99 27       	eor	r25, r25
    12d0:	88 27       	eor	r24, r24
    12d2:	68 2a       	or	r6, r24
    12d4:	79 2a       	or	r7, r25
    12d6:	8a 2a       	or	r8, r26
    12d8:	9b 2a       	or	r9, r27
    12da:	82 01       	movw	r16, r4
    12dc:	22 27       	eor	r18, r18
    12de:	33 27       	eor	r19, r19
    12e0:	29 96       	adiw	r28, 0x09	; 9
    12e2:	0c af       	std	Y+60, r16	; 0x3c
    12e4:	1d af       	std	Y+61, r17	; 0x3d
    12e6:	2e af       	std	Y+62, r18	; 0x3e
    12e8:	3f af       	std	Y+63, r19	; 0x3f
    12ea:	29 97       	sbiw	r28, 0x09	; 9
    12ec:	a2 01       	movw	r20, r4
    12ee:	91 01       	movw	r18, r2
    12f0:	40 70       	andi	r20, 0x00	; 0
    12f2:	50 70       	andi	r21, 0x00	; 0
    12f4:	2d 96       	adiw	r28, 0x0d	; 13
    12f6:	2c af       	std	Y+60, r18	; 0x3c
    12f8:	3d af       	std	Y+61, r19	; 0x3d
    12fa:	4e af       	std	Y+62, r20	; 0x3e
    12fc:	5f af       	std	Y+63, r21	; 0x3f
    12fe:	2d 97       	sbiw	r28, 0x0d	; 13
    1300:	c6 01       	movw	r24, r12
    1302:	b5 01       	movw	r22, r10
    1304:	29 96       	adiw	r28, 0x09	; 9
    1306:	2c ad       	ldd	r18, Y+60	; 0x3c
    1308:	3d ad       	ldd	r19, Y+61	; 0x3d
    130a:	4e ad       	ldd	r20, Y+62	; 0x3e
    130c:	5f ad       	ldd	r21, Y+63	; 0x3f
    130e:	29 97       	sbiw	r28, 0x09	; 9
    1310:	3b d3       	rcall	.+1654   	; 0x1988 <__udivmodsi4>
    1312:	7b 01       	movw	r14, r22
    1314:	8c 01       	movw	r16, r24
    1316:	c6 01       	movw	r24, r12
    1318:	b5 01       	movw	r22, r10
    131a:	29 96       	adiw	r28, 0x09	; 9
    131c:	2c ad       	ldd	r18, Y+60	; 0x3c
    131e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1320:	4e ad       	ldd	r20, Y+62	; 0x3e
    1322:	5f ad       	ldd	r21, Y+63	; 0x3f
    1324:	29 97       	sbiw	r28, 0x09	; 9
    1326:	30 d3       	rcall	.+1632   	; 0x1988 <__udivmodsi4>
    1328:	c9 01       	movw	r24, r18
    132a:	da 01       	movw	r26, r20
    132c:	61 96       	adiw	r28, 0x11	; 17
    132e:	8c af       	std	Y+60, r24	; 0x3c
    1330:	9d af       	std	Y+61, r25	; 0x3d
    1332:	ae af       	std	Y+62, r26	; 0x3e
    1334:	bf af       	std	Y+63, r27	; 0x3f
    1336:	61 97       	sbiw	r28, 0x11	; 17
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	2d 96       	adiw	r28, 0x0d	; 13
    133e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1340:	3d ad       	ldd	r19, Y+61	; 0x3d
    1342:	4e ad       	ldd	r20, Y+62	; 0x3e
    1344:	5f ad       	ldd	r21, Y+63	; 0x3f
    1346:	2d 97       	sbiw	r28, 0x0d	; 13
    1348:	41 d3       	rcall	.+1666   	; 0x19cc <__mulsi3>
    134a:	9b 01       	movw	r18, r22
    134c:	ac 01       	movw	r20, r24
    134e:	87 01       	movw	r16, r14
    1350:	ff 24       	eor	r15, r15
    1352:	ee 24       	eor	r14, r14
    1354:	ad a4       	ldd	r10, Y+45	; 0x2d
    1356:	be a4       	ldd	r11, Y+46	; 0x2e
    1358:	cf a4       	ldd	r12, Y+47	; 0x2f
    135a:	d8 a8       	ldd	r13, Y+48	; 0x30
    135c:	c6 01       	movw	r24, r12
    135e:	aa 27       	eor	r26, r26
    1360:	bb 27       	eor	r27, r27
    1362:	57 01       	movw	r10, r14
    1364:	68 01       	movw	r12, r16
    1366:	a8 2a       	or	r10, r24
    1368:	b9 2a       	or	r11, r25
    136a:	ca 2a       	or	r12, r26
    136c:	db 2a       	or	r13, r27
    136e:	a2 16       	cp	r10, r18
    1370:	b3 06       	cpc	r11, r19
    1372:	c4 06       	cpc	r12, r20
    1374:	d5 06       	cpc	r13, r21
    1376:	60 f5       	brcc	.+88     	; 0x13d0 <__udivdi3+0x6f4>
    1378:	61 96       	adiw	r28, 0x11	; 17
    137a:	6c ad       	ldd	r22, Y+60	; 0x3c
    137c:	7d ad       	ldd	r23, Y+61	; 0x3d
    137e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1380:	9f ad       	ldd	r25, Y+63	; 0x3f
    1382:	61 97       	sbiw	r28, 0x11	; 17
    1384:	61 50       	subi	r22, 0x01	; 1
    1386:	70 40       	sbci	r23, 0x00	; 0
    1388:	80 40       	sbci	r24, 0x00	; 0
    138a:	90 40       	sbci	r25, 0x00	; 0
    138c:	61 96       	adiw	r28, 0x11	; 17
    138e:	6c af       	std	Y+60, r22	; 0x3c
    1390:	7d af       	std	Y+61, r23	; 0x3d
    1392:	8e af       	std	Y+62, r24	; 0x3e
    1394:	9f af       	std	Y+63, r25	; 0x3f
    1396:	61 97       	sbiw	r28, 0x11	; 17
    1398:	a2 0c       	add	r10, r2
    139a:	b3 1c       	adc	r11, r3
    139c:	c4 1c       	adc	r12, r4
    139e:	d5 1c       	adc	r13, r5
    13a0:	a2 14       	cp	r10, r2
    13a2:	b3 04       	cpc	r11, r3
    13a4:	c4 04       	cpc	r12, r4
    13a6:	d5 04       	cpc	r13, r5
    13a8:	98 f0       	brcs	.+38     	; 0x13d0 <__udivdi3+0x6f4>
    13aa:	a2 16       	cp	r10, r18
    13ac:	b3 06       	cpc	r11, r19
    13ae:	c4 06       	cpc	r12, r20
    13b0:	d5 06       	cpc	r13, r21
    13b2:	70 f4       	brcc	.+28     	; 0x13d0 <__udivdi3+0x6f4>
    13b4:	61 50       	subi	r22, 0x01	; 1
    13b6:	70 40       	sbci	r23, 0x00	; 0
    13b8:	80 40       	sbci	r24, 0x00	; 0
    13ba:	90 40       	sbci	r25, 0x00	; 0
    13bc:	61 96       	adiw	r28, 0x11	; 17
    13be:	6c af       	std	Y+60, r22	; 0x3c
    13c0:	7d af       	std	Y+61, r23	; 0x3d
    13c2:	8e af       	std	Y+62, r24	; 0x3e
    13c4:	9f af       	std	Y+63, r25	; 0x3f
    13c6:	61 97       	sbiw	r28, 0x11	; 17
    13c8:	a2 0c       	add	r10, r2
    13ca:	b3 1c       	adc	r11, r3
    13cc:	c4 1c       	adc	r12, r4
    13ce:	d5 1c       	adc	r13, r5
    13d0:	a2 1a       	sub	r10, r18
    13d2:	b3 0a       	sbc	r11, r19
    13d4:	c4 0a       	sbc	r12, r20
    13d6:	d5 0a       	sbc	r13, r21
    13d8:	c6 01       	movw	r24, r12
    13da:	b5 01       	movw	r22, r10
    13dc:	29 96       	adiw	r28, 0x09	; 9
    13de:	2c ad       	ldd	r18, Y+60	; 0x3c
    13e0:	3d ad       	ldd	r19, Y+61	; 0x3d
    13e2:	4e ad       	ldd	r20, Y+62	; 0x3e
    13e4:	5f ad       	ldd	r21, Y+63	; 0x3f
    13e6:	29 97       	sbiw	r28, 0x09	; 9
    13e8:	cf d2       	rcall	.+1438   	; 0x1988 <__udivmodsi4>
    13ea:	7b 01       	movw	r14, r22
    13ec:	8c 01       	movw	r16, r24
    13ee:	c6 01       	movw	r24, r12
    13f0:	b5 01       	movw	r22, r10
    13f2:	29 96       	adiw	r28, 0x09	; 9
    13f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13fc:	29 97       	sbiw	r28, 0x09	; 9
    13fe:	c4 d2       	rcall	.+1416   	; 0x1988 <__udivmodsi4>
    1400:	c9 01       	movw	r24, r18
    1402:	da 01       	movw	r26, r20
    1404:	5c 01       	movw	r10, r24
    1406:	6d 01       	movw	r12, r26
    1408:	c6 01       	movw	r24, r12
    140a:	b5 01       	movw	r22, r10
    140c:	2d 96       	adiw	r28, 0x0d	; 13
    140e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1410:	3d ad       	ldd	r19, Y+61	; 0x3d
    1412:	4e ad       	ldd	r20, Y+62	; 0x3e
    1414:	5f ad       	ldd	r21, Y+63	; 0x3f
    1416:	2d 97       	sbiw	r28, 0x0d	; 13
    1418:	d9 d2       	rcall	.+1458   	; 0x19cc <__mulsi3>
    141a:	9b 01       	movw	r18, r22
    141c:	ac 01       	movw	r20, r24
    141e:	87 01       	movw	r16, r14
    1420:	ff 24       	eor	r15, r15
    1422:	ee 24       	eor	r14, r14
    1424:	8d a5       	ldd	r24, Y+45	; 0x2d
    1426:	9e a5       	ldd	r25, Y+46	; 0x2e
    1428:	af a5       	ldd	r26, Y+47	; 0x2f
    142a:	b8 a9       	ldd	r27, Y+48	; 0x30
    142c:	a0 70       	andi	r26, 0x00	; 0
    142e:	b0 70       	andi	r27, 0x00	; 0
    1430:	e8 2a       	or	r14, r24
    1432:	f9 2a       	or	r15, r25
    1434:	0a 2b       	or	r16, r26
    1436:	1b 2b       	or	r17, r27
    1438:	e2 16       	cp	r14, r18
    143a:	f3 06       	cpc	r15, r19
    143c:	04 07       	cpc	r16, r20
    143e:	15 07       	cpc	r17, r21
    1440:	c0 f4       	brcc	.+48     	; 0x1472 <__udivdi3+0x796>
    1442:	08 94       	sec
    1444:	a1 08       	sbc	r10, r1
    1446:	b1 08       	sbc	r11, r1
    1448:	c1 08       	sbc	r12, r1
    144a:	d1 08       	sbc	r13, r1
    144c:	e2 0c       	add	r14, r2
    144e:	f3 1c       	adc	r15, r3
    1450:	04 1d       	adc	r16, r4
    1452:	15 1d       	adc	r17, r5
    1454:	e2 14       	cp	r14, r2
    1456:	f3 04       	cpc	r15, r3
    1458:	04 05       	cpc	r16, r4
    145a:	15 05       	cpc	r17, r5
    145c:	50 f0       	brcs	.+20     	; 0x1472 <__udivdi3+0x796>
    145e:	e2 16       	cp	r14, r18
    1460:	f3 06       	cpc	r15, r19
    1462:	04 07       	cpc	r16, r20
    1464:	15 07       	cpc	r17, r21
    1466:	28 f4       	brcc	.+10     	; 0x1472 <__udivdi3+0x796>
    1468:	08 94       	sec
    146a:	a1 08       	sbc	r10, r1
    146c:	b1 08       	sbc	r11, r1
    146e:	c1 08       	sbc	r12, r1
    1470:	d1 08       	sbc	r13, r1
    1472:	61 96       	adiw	r28, 0x11	; 17
    1474:	ec ac       	ldd	r14, Y+60	; 0x3c
    1476:	fd ac       	ldd	r15, Y+61	; 0x3d
    1478:	0e ad       	ldd	r16, Y+62	; 0x3e
    147a:	1f ad       	ldd	r17, Y+63	; 0x3f
    147c:	61 97       	sbiw	r28, 0x11	; 17
    147e:	d7 01       	movw	r26, r14
    1480:	99 27       	eor	r25, r25
    1482:	88 27       	eor	r24, r24
    1484:	96 01       	movw	r18, r12
    1486:	85 01       	movw	r16, r10
    1488:	08 2b       	or	r16, r24
    148a:	19 2b       	or	r17, r25
    148c:	2a 2b       	or	r18, r26
    148e:	3b 2b       	or	r19, r27
    1490:	09 ab       	std	Y+49, r16	; 0x31
    1492:	1a ab       	std	Y+50, r17	; 0x32
    1494:	2b ab       	std	Y+51, r18	; 0x33
    1496:	3c ab       	std	Y+52, r19	; 0x34
    1498:	58 c2       	rjmp	.+1200   	; 0x194a <__udivdi3+0xc6e>
    149a:	6e 14       	cp	r6, r14
    149c:	7f 04       	cpc	r7, r15
    149e:	80 06       	cpc	r8, r16
    14a0:	91 06       	cpc	r9, r17
    14a2:	08 f4       	brcc	.+2      	; 0x14a6 <__udivdi3+0x7ca>
    14a4:	47 c2       	rjmp	.+1166   	; 0x1934 <__udivdi3+0xc58>
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	e2 16       	cp	r14, r18
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	f2 06       	cpc	r15, r18
    14ae:	21 e0       	ldi	r18, 0x01	; 1
    14b0:	02 07       	cpc	r16, r18
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	12 07       	cpc	r17, r18
    14b6:	88 f4       	brcc	.+34     	; 0x14da <__udivdi3+0x7fe>
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	e3 16       	cp	r14, r19
    14bc:	f1 04       	cpc	r15, r1
    14be:	01 05       	cpc	r16, r1
    14c0:	11 05       	cpc	r17, r1
    14c2:	31 f0       	breq	.+12     	; 0x14d0 <__udivdi3+0x7f4>
    14c4:	28 f0       	brcs	.+10     	; 0x14d0 <__udivdi3+0x7f4>
    14c6:	48 e0       	ldi	r20, 0x08	; 8
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	17 c0       	rjmp	.+46     	; 0x14fe <__udivdi3+0x822>
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	12 c0       	rjmp	.+36     	; 0x14fe <__udivdi3+0x822>
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	e4 16       	cp	r14, r20
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	f4 06       	cpc	r15, r20
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	04 07       	cpc	r16, r20
    14e6:	41 e0       	ldi	r20, 0x01	; 1
    14e8:	14 07       	cpc	r17, r20
    14ea:	28 f0       	brcs	.+10     	; 0x14f6 <__udivdi3+0x81a>
    14ec:	48 e1       	ldi	r20, 0x18	; 24
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <__udivdi3+0x822>
    14f6:	40 e1       	ldi	r20, 0x10	; 16
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	d8 01       	movw	r26, r16
    1500:	c7 01       	movw	r24, r14
    1502:	04 2e       	mov	r0, r20
    1504:	04 c0       	rjmp	.+8      	; 0x150e <__udivdi3+0x832>
    1506:	b6 95       	lsr	r27
    1508:	a7 95       	ror	r26
    150a:	97 95       	ror	r25
    150c:	87 95       	ror	r24
    150e:	0a 94       	dec	r0
    1510:	d2 f7       	brpl	.-12     	; 0x1506 <__udivdi3+0x82a>
    1512:	80 5a       	subi	r24, 0xA0	; 160
    1514:	9f 4f       	sbci	r25, 0xFF	; 255
    1516:	dc 01       	movw	r26, r24
    1518:	2c 91       	ld	r18, X
    151a:	30 e2       	ldi	r19, 0x20	; 32
    151c:	a3 2e       	mov	r10, r19
    151e:	b1 2c       	mov	r11, r1
    1520:	c1 2c       	mov	r12, r1
    1522:	d1 2c       	mov	r13, r1
    1524:	d6 01       	movw	r26, r12
    1526:	c5 01       	movw	r24, r10
    1528:	84 1b       	sub	r24, r20
    152a:	95 0b       	sbc	r25, r21
    152c:	a6 0b       	sbc	r26, r22
    152e:	b7 0b       	sbc	r27, r23
    1530:	82 1b       	sub	r24, r18
    1532:	91 09       	sbc	r25, r1
    1534:	a1 09       	sbc	r26, r1
    1536:	b1 09       	sbc	r27, r1
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	a1 05       	cpc	r26, r1
    153c:	b1 05       	cpc	r27, r1
    153e:	89 f4       	brne	.+34     	; 0x1562 <__udivdi3+0x886>
    1540:	e6 14       	cp	r14, r6
    1542:	f7 04       	cpc	r15, r7
    1544:	08 05       	cpc	r16, r8
    1546:	19 05       	cpc	r17, r9
    1548:	08 f4       	brcc	.+2      	; 0x154c <__udivdi3+0x870>
    154a:	e8 c1       	rjmp	.+976    	; 0x191c <__udivdi3+0xc40>
    154c:	6d a4       	ldd	r6, Y+45	; 0x2d
    154e:	7e a4       	ldd	r7, Y+46	; 0x2e
    1550:	8f a4       	ldd	r8, Y+47	; 0x2f
    1552:	98 a8       	ldd	r9, Y+48	; 0x30
    1554:	62 14       	cp	r6, r2
    1556:	73 04       	cpc	r7, r3
    1558:	84 04       	cpc	r8, r4
    155a:	95 04       	cpc	r9, r5
    155c:	08 f0       	brcs	.+2      	; 0x1560 <__udivdi3+0x884>
    155e:	de c1       	rjmp	.+956    	; 0x191c <__udivdi3+0xc40>
    1560:	e9 c1       	rjmp	.+978    	; 0x1934 <__udivdi3+0xc58>
    1562:	6e 96       	adiw	r28, 0x1e	; 30
    1564:	8f af       	std	Y+63, r24	; 0x3f
    1566:	6e 97       	sbiw	r28, 0x1e	; 30
    1568:	08 2e       	mov	r0, r24
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <__udivdi3+0x898>
    156c:	ee 0c       	add	r14, r14
    156e:	ff 1c       	adc	r15, r15
    1570:	00 1f       	adc	r16, r16
    1572:	11 1f       	adc	r17, r17
    1574:	0a 94       	dec	r0
    1576:	d2 f7       	brpl	.-12     	; 0x156c <__udivdi3+0x890>
    1578:	6a 2d       	mov	r22, r10
    157a:	68 1b       	sub	r22, r24
    157c:	d2 01       	movw	r26, r4
    157e:	c1 01       	movw	r24, r2
    1580:	06 2e       	mov	r0, r22
    1582:	04 c0       	rjmp	.+8      	; 0x158c <__udivdi3+0x8b0>
    1584:	b6 95       	lsr	r27
    1586:	a7 95       	ror	r26
    1588:	97 95       	ror	r25
    158a:	87 95       	ror	r24
    158c:	0a 94       	dec	r0
    158e:	d2 f7       	brpl	.-12     	; 0x1584 <__udivdi3+0x8a8>
    1590:	5c 01       	movw	r10, r24
    1592:	6d 01       	movw	r12, r26
    1594:	ae 28       	or	r10, r14
    1596:	bf 28       	or	r11, r15
    1598:	c0 2a       	or	r12, r16
    159a:	d1 2a       	or	r13, r17
    159c:	ad a2       	std	Y+37, r10	; 0x25
    159e:	be a2       	std	Y+38, r11	; 0x26
    15a0:	cf a2       	std	Y+39, r12	; 0x27
    15a2:	d8 a6       	std	Y+40, r13	; 0x28
    15a4:	72 01       	movw	r14, r4
    15a6:	61 01       	movw	r12, r2
    15a8:	6e 96       	adiw	r28, 0x1e	; 30
    15aa:	0f ac       	ldd	r0, Y+63	; 0x3f
    15ac:	6e 97       	sbiw	r28, 0x1e	; 30
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <__udivdi3+0x8dc>
    15b0:	cc 0c       	add	r12, r12
    15b2:	dd 1c       	adc	r13, r13
    15b4:	ee 1c       	adc	r14, r14
    15b6:	ff 1c       	adc	r15, r15
    15b8:	0a 94       	dec	r0
    15ba:	d2 f7       	brpl	.-12     	; 0x15b0 <__udivdi3+0x8d4>
    15bc:	c9 a2       	std	Y+33, r12	; 0x21
    15be:	da a2       	std	Y+34, r13	; 0x22
    15c0:	eb a2       	std	Y+35, r14	; 0x23
    15c2:	fc a2       	std	Y+36, r15	; 0x24
    15c4:	64 01       	movw	r12, r8
    15c6:	53 01       	movw	r10, r6
    15c8:	06 2e       	mov	r0, r22
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <__udivdi3+0x8f8>
    15cc:	d6 94       	lsr	r13
    15ce:	c7 94       	ror	r12
    15d0:	b7 94       	ror	r11
    15d2:	a7 94       	ror	r10
    15d4:	0a 94       	dec	r0
    15d6:	d2 f7       	brpl	.-12     	; 0x15cc <__udivdi3+0x8f0>
    15d8:	d4 01       	movw	r26, r8
    15da:	c3 01       	movw	r24, r6
    15dc:	6e 96       	adiw	r28, 0x1e	; 30
    15de:	0f ac       	ldd	r0, Y+63	; 0x3f
    15e0:	6e 97       	sbiw	r28, 0x1e	; 30
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <__udivdi3+0x910>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	aa 1f       	adc	r26, r26
    15ea:	bb 1f       	adc	r27, r27
    15ec:	0a 94       	dec	r0
    15ee:	d2 f7       	brpl	.-12     	; 0x15e4 <__udivdi3+0x908>
    15f0:	ed a4       	ldd	r14, Y+45	; 0x2d
    15f2:	fe a4       	ldd	r15, Y+46	; 0x2e
    15f4:	0f a5       	ldd	r16, Y+47	; 0x2f
    15f6:	18 a9       	ldd	r17, Y+48	; 0x30
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__udivdi3+0x926>
    15fa:	16 95       	lsr	r17
    15fc:	07 95       	ror	r16
    15fe:	f7 94       	ror	r15
    1600:	e7 94       	ror	r14
    1602:	6a 95       	dec	r22
    1604:	d2 f7       	brpl	.-12     	; 0x15fa <__udivdi3+0x91e>
    1606:	37 01       	movw	r6, r14
    1608:	48 01       	movw	r8, r16
    160a:	68 2a       	or	r6, r24
    160c:	79 2a       	or	r7, r25
    160e:	8a 2a       	or	r8, r26
    1610:	9b 2a       	or	r9, r27
    1612:	6d 8e       	std	Y+29, r6	; 0x1d
    1614:	7e 8e       	std	Y+30, r7	; 0x1e
    1616:	8f 8e       	std	Y+31, r8	; 0x1f
    1618:	98 a2       	std	Y+32, r9	; 0x20
    161a:	ed a0       	ldd	r14, Y+37	; 0x25
    161c:	fe a0       	ldd	r15, Y+38	; 0x26
    161e:	0f a1       	ldd	r16, Y+39	; 0x27
    1620:	18 a5       	ldd	r17, Y+40	; 0x28
    1622:	38 01       	movw	r6, r16
    1624:	88 24       	eor	r8, r8
    1626:	99 24       	eor	r9, r9
    1628:	98 01       	movw	r18, r16
    162a:	87 01       	movw	r16, r14
    162c:	20 70       	andi	r18, 0x00	; 0
    162e:	30 70       	andi	r19, 0x00	; 0
    1630:	65 96       	adiw	r28, 0x15	; 21
    1632:	0c af       	std	Y+60, r16	; 0x3c
    1634:	1d af       	std	Y+61, r17	; 0x3d
    1636:	2e af       	std	Y+62, r18	; 0x3e
    1638:	3f af       	std	Y+63, r19	; 0x3f
    163a:	65 97       	sbiw	r28, 0x15	; 21
    163c:	c6 01       	movw	r24, r12
    163e:	b5 01       	movw	r22, r10
    1640:	a4 01       	movw	r20, r8
    1642:	93 01       	movw	r18, r6
    1644:	a1 d1       	rcall	.+834    	; 0x1988 <__udivmodsi4>
    1646:	7b 01       	movw	r14, r22
    1648:	8c 01       	movw	r16, r24
    164a:	c6 01       	movw	r24, r12
    164c:	b5 01       	movw	r22, r10
    164e:	a4 01       	movw	r20, r8
    1650:	93 01       	movw	r18, r6
    1652:	9a d1       	rcall	.+820    	; 0x1988 <__udivmodsi4>
    1654:	c9 01       	movw	r24, r18
    1656:	da 01       	movw	r26, r20
    1658:	1c 01       	movw	r2, r24
    165a:	2d 01       	movw	r4, r26
    165c:	c2 01       	movw	r24, r4
    165e:	b1 01       	movw	r22, r2
    1660:	65 96       	adiw	r28, 0x15	; 21
    1662:	2c ad       	ldd	r18, Y+60	; 0x3c
    1664:	3d ad       	ldd	r19, Y+61	; 0x3d
    1666:	4e ad       	ldd	r20, Y+62	; 0x3e
    1668:	5f ad       	ldd	r21, Y+63	; 0x3f
    166a:	65 97       	sbiw	r28, 0x15	; 21
    166c:	af d1       	rcall	.+862    	; 0x19cc <__mulsi3>
    166e:	9b 01       	movw	r18, r22
    1670:	ac 01       	movw	r20, r24
    1672:	87 01       	movw	r16, r14
    1674:	ff 24       	eor	r15, r15
    1676:	ee 24       	eor	r14, r14
    1678:	ad 8c       	ldd	r10, Y+29	; 0x1d
    167a:	be 8c       	ldd	r11, Y+30	; 0x1e
    167c:	cf 8c       	ldd	r12, Y+31	; 0x1f
    167e:	d8 a0       	ldd	r13, Y+32	; 0x20
    1680:	c6 01       	movw	r24, r12
    1682:	aa 27       	eor	r26, r26
    1684:	bb 27       	eor	r27, r27
    1686:	57 01       	movw	r10, r14
    1688:	68 01       	movw	r12, r16
    168a:	a8 2a       	or	r10, r24
    168c:	b9 2a       	or	r11, r25
    168e:	ca 2a       	or	r12, r26
    1690:	db 2a       	or	r13, r27
    1692:	a2 16       	cp	r10, r18
    1694:	b3 06       	cpc	r11, r19
    1696:	c4 06       	cpc	r12, r20
    1698:	d5 06       	cpc	r13, r21
    169a:	00 f5       	brcc	.+64     	; 0x16dc <__udivdi3+0xa00>
    169c:	08 94       	sec
    169e:	21 08       	sbc	r2, r1
    16a0:	31 08       	sbc	r3, r1
    16a2:	41 08       	sbc	r4, r1
    16a4:	51 08       	sbc	r5, r1
    16a6:	ed a0       	ldd	r14, Y+37	; 0x25
    16a8:	fe a0       	ldd	r15, Y+38	; 0x26
    16aa:	0f a1       	ldd	r16, Y+39	; 0x27
    16ac:	18 a5       	ldd	r17, Y+40	; 0x28
    16ae:	ae 0c       	add	r10, r14
    16b0:	bf 1c       	adc	r11, r15
    16b2:	c0 1e       	adc	r12, r16
    16b4:	d1 1e       	adc	r13, r17
    16b6:	ae 14       	cp	r10, r14
    16b8:	bf 04       	cpc	r11, r15
    16ba:	c0 06       	cpc	r12, r16
    16bc:	d1 06       	cpc	r13, r17
    16be:	70 f0       	brcs	.+28     	; 0x16dc <__udivdi3+0xa00>
    16c0:	a2 16       	cp	r10, r18
    16c2:	b3 06       	cpc	r11, r19
    16c4:	c4 06       	cpc	r12, r20
    16c6:	d5 06       	cpc	r13, r21
    16c8:	48 f4       	brcc	.+18     	; 0x16dc <__udivdi3+0xa00>
    16ca:	08 94       	sec
    16cc:	21 08       	sbc	r2, r1
    16ce:	31 08       	sbc	r3, r1
    16d0:	41 08       	sbc	r4, r1
    16d2:	51 08       	sbc	r5, r1
    16d4:	ae 0c       	add	r10, r14
    16d6:	bf 1c       	adc	r11, r15
    16d8:	c0 1e       	adc	r12, r16
    16da:	d1 1e       	adc	r13, r17
    16dc:	a2 1a       	sub	r10, r18
    16de:	b3 0a       	sbc	r11, r19
    16e0:	c4 0a       	sbc	r12, r20
    16e2:	d5 0a       	sbc	r13, r21
    16e4:	c6 01       	movw	r24, r12
    16e6:	b5 01       	movw	r22, r10
    16e8:	a4 01       	movw	r20, r8
    16ea:	93 01       	movw	r18, r6
    16ec:	4d d1       	rcall	.+666    	; 0x1988 <__udivmodsi4>
    16ee:	7b 01       	movw	r14, r22
    16f0:	8c 01       	movw	r16, r24
    16f2:	c6 01       	movw	r24, r12
    16f4:	b5 01       	movw	r22, r10
    16f6:	a4 01       	movw	r20, r8
    16f8:	93 01       	movw	r18, r6
    16fa:	46 d1       	rcall	.+652    	; 0x1988 <__udivmodsi4>
    16fc:	c9 01       	movw	r24, r18
    16fe:	da 01       	movw	r26, r20
    1700:	3c 01       	movw	r6, r24
    1702:	4d 01       	movw	r8, r26
    1704:	c4 01       	movw	r24, r8
    1706:	b3 01       	movw	r22, r6
    1708:	65 96       	adiw	r28, 0x15	; 21
    170a:	2c ad       	ldd	r18, Y+60	; 0x3c
    170c:	3d ad       	ldd	r19, Y+61	; 0x3d
    170e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1710:	5f ad       	ldd	r21, Y+63	; 0x3f
    1712:	65 97       	sbiw	r28, 0x15	; 21
    1714:	5b d1       	rcall	.+694    	; 0x19cc <__mulsi3>
    1716:	9b 01       	movw	r18, r22
    1718:	ac 01       	movw	r20, r24
    171a:	87 01       	movw	r16, r14
    171c:	ff 24       	eor	r15, r15
    171e:	ee 24       	eor	r14, r14
    1720:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1722:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1724:	af 8d       	ldd	r26, Y+31	; 0x1f
    1726:	b8 a1       	ldd	r27, Y+32	; 0x20
    1728:	a0 70       	andi	r26, 0x00	; 0
    172a:	b0 70       	andi	r27, 0x00	; 0
    172c:	57 01       	movw	r10, r14
    172e:	68 01       	movw	r12, r16
    1730:	a8 2a       	or	r10, r24
    1732:	b9 2a       	or	r11, r25
    1734:	ca 2a       	or	r12, r26
    1736:	db 2a       	or	r13, r27
    1738:	a2 16       	cp	r10, r18
    173a:	b3 06       	cpc	r11, r19
    173c:	c4 06       	cpc	r12, r20
    173e:	d5 06       	cpc	r13, r21
    1740:	00 f5       	brcc	.+64     	; 0x1782 <__udivdi3+0xaa6>
    1742:	08 94       	sec
    1744:	61 08       	sbc	r6, r1
    1746:	71 08       	sbc	r7, r1
    1748:	81 08       	sbc	r8, r1
    174a:	91 08       	sbc	r9, r1
    174c:	6d a1       	ldd	r22, Y+37	; 0x25
    174e:	7e a1       	ldd	r23, Y+38	; 0x26
    1750:	8f a1       	ldd	r24, Y+39	; 0x27
    1752:	98 a5       	ldd	r25, Y+40	; 0x28
    1754:	a6 0e       	add	r10, r22
    1756:	b7 1e       	adc	r11, r23
    1758:	c8 1e       	adc	r12, r24
    175a:	d9 1e       	adc	r13, r25
    175c:	a6 16       	cp	r10, r22
    175e:	b7 06       	cpc	r11, r23
    1760:	c8 06       	cpc	r12, r24
    1762:	d9 06       	cpc	r13, r25
    1764:	70 f0       	brcs	.+28     	; 0x1782 <__udivdi3+0xaa6>
    1766:	a2 16       	cp	r10, r18
    1768:	b3 06       	cpc	r11, r19
    176a:	c4 06       	cpc	r12, r20
    176c:	d5 06       	cpc	r13, r21
    176e:	48 f4       	brcc	.+18     	; 0x1782 <__udivdi3+0xaa6>
    1770:	08 94       	sec
    1772:	61 08       	sbc	r6, r1
    1774:	71 08       	sbc	r7, r1
    1776:	81 08       	sbc	r8, r1
    1778:	91 08       	sbc	r9, r1
    177a:	a6 0e       	add	r10, r22
    177c:	b7 1e       	adc	r11, r23
    177e:	c8 1e       	adc	r12, r24
    1780:	d9 1e       	adc	r13, r25
    1782:	d6 01       	movw	r26, r12
    1784:	c5 01       	movw	r24, r10
    1786:	82 1b       	sub	r24, r18
    1788:	93 0b       	sbc	r25, r19
    178a:	a4 0b       	sbc	r26, r20
    178c:	b5 0b       	sbc	r27, r21
    178e:	89 8f       	std	Y+25, r24	; 0x19
    1790:	9a 8f       	std	Y+26, r25	; 0x1a
    1792:	ab 8f       	std	Y+27, r26	; 0x1b
    1794:	bc 8f       	std	Y+28, r27	; 0x1c
    1796:	d1 01       	movw	r26, r2
    1798:	99 27       	eor	r25, r25
    179a:	88 27       	eor	r24, r24
    179c:	64 01       	movw	r12, r8
    179e:	53 01       	movw	r10, r6
    17a0:	a8 2a       	or	r10, r24
    17a2:	b9 2a       	or	r11, r25
    17a4:	ca 2a       	or	r12, r26
    17a6:	db 2a       	or	r13, r27
    17a8:	a9 aa       	std	Y+49, r10	; 0x31
    17aa:	ba aa       	std	Y+50, r11	; 0x32
    17ac:	cb aa       	std	Y+51, r12	; 0x33
    17ae:	dc aa       	std	Y+52, r13	; 0x34
    17b0:	86 01       	movw	r16, r12
    17b2:	75 01       	movw	r14, r10
    17b4:	2f ef       	ldi	r18, 0xFF	; 255
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	e2 22       	and	r14, r18
    17be:	f3 22       	and	r15, r19
    17c0:	04 23       	and	r16, r20
    17c2:	15 23       	and	r17, r21
    17c4:	a6 01       	movw	r20, r12
    17c6:	66 27       	eor	r22, r22
    17c8:	77 27       	eor	r23, r23
    17ca:	6d 96       	adiw	r28, 0x1d	; 29
    17cc:	4c af       	std	Y+60, r20	; 0x3c
    17ce:	5d af       	std	Y+61, r21	; 0x3d
    17d0:	6e af       	std	Y+62, r22	; 0x3e
    17d2:	7f af       	std	Y+63, r23	; 0x3f
    17d4:	6d 97       	sbiw	r28, 0x1d	; 29
    17d6:	a9 a0       	ldd	r10, Y+33	; 0x21
    17d8:	ba a0       	ldd	r11, Y+34	; 0x22
    17da:	cb a0       	ldd	r12, Y+35	; 0x23
    17dc:	dc a0       	ldd	r13, Y+36	; 0x24
    17de:	6f ef       	ldi	r22, 0xFF	; 255
    17e0:	7f ef       	ldi	r23, 0xFF	; 255
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a6 22       	and	r10, r22
    17e8:	b7 22       	and	r11, r23
    17ea:	c8 22       	and	r12, r24
    17ec:	d9 22       	and	r13, r25
    17ee:	89 a1       	ldd	r24, Y+33	; 0x21
    17f0:	9a a1       	ldd	r25, Y+34	; 0x22
    17f2:	ab a1       	ldd	r26, Y+35	; 0x23
    17f4:	bc a1       	ldd	r27, Y+36	; 0x24
    17f6:	1d 01       	movw	r2, r26
    17f8:	44 24       	eor	r4, r4
    17fa:	55 24       	eor	r5, r5
    17fc:	c8 01       	movw	r24, r16
    17fe:	b7 01       	movw	r22, r14
    1800:	a6 01       	movw	r20, r12
    1802:	95 01       	movw	r18, r10
    1804:	e3 d0       	rcall	.+454    	; 0x19cc <__mulsi3>
    1806:	69 96       	adiw	r28, 0x19	; 25
    1808:	6c af       	std	Y+60, r22	; 0x3c
    180a:	7d af       	std	Y+61, r23	; 0x3d
    180c:	8e af       	std	Y+62, r24	; 0x3e
    180e:	9f af       	std	Y+63, r25	; 0x3f
    1810:	69 97       	sbiw	r28, 0x19	; 25
    1812:	c8 01       	movw	r24, r16
    1814:	b7 01       	movw	r22, r14
    1816:	a2 01       	movw	r20, r4
    1818:	91 01       	movw	r18, r2
    181a:	d8 d0       	rcall	.+432    	; 0x19cc <__mulsi3>
    181c:	3b 01       	movw	r6, r22
    181e:	4c 01       	movw	r8, r24
    1820:	6d 96       	adiw	r28, 0x1d	; 29
    1822:	6c ad       	ldd	r22, Y+60	; 0x3c
    1824:	7d ad       	ldd	r23, Y+61	; 0x3d
    1826:	8e ad       	ldd	r24, Y+62	; 0x3e
    1828:	9f ad       	ldd	r25, Y+63	; 0x3f
    182a:	6d 97       	sbiw	r28, 0x1d	; 29
    182c:	a6 01       	movw	r20, r12
    182e:	95 01       	movw	r18, r10
    1830:	cd d0       	rcall	.+410    	; 0x19cc <__mulsi3>
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
    1836:	6d 96       	adiw	r28, 0x1d	; 29
    1838:	6c ad       	ldd	r22, Y+60	; 0x3c
    183a:	7d ad       	ldd	r23, Y+61	; 0x3d
    183c:	8e ad       	ldd	r24, Y+62	; 0x3e
    183e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1840:	6d 97       	sbiw	r28, 0x1d	; 29
    1842:	a2 01       	movw	r20, r4
    1844:	91 01       	movw	r18, r2
    1846:	c2 d0       	rcall	.+388    	; 0x19cc <__mulsi3>
    1848:	5b 01       	movw	r10, r22
    184a:	6c 01       	movw	r12, r24
    184c:	a8 01       	movw	r20, r16
    184e:	97 01       	movw	r18, r14
    1850:	26 0d       	add	r18, r6
    1852:	37 1d       	adc	r19, r7
    1854:	48 1d       	adc	r20, r8
    1856:	59 1d       	adc	r21, r9
    1858:	69 96       	adiw	r28, 0x19	; 25
    185a:	6c ac       	ldd	r6, Y+60	; 0x3c
    185c:	7d ac       	ldd	r7, Y+61	; 0x3d
    185e:	8e ac       	ldd	r8, Y+62	; 0x3e
    1860:	9f ac       	ldd	r9, Y+63	; 0x3f
    1862:	69 97       	sbiw	r28, 0x19	; 25
    1864:	c4 01       	movw	r24, r8
    1866:	aa 27       	eor	r26, r26
    1868:	bb 27       	eor	r27, r27
    186a:	28 0f       	add	r18, r24
    186c:	39 1f       	adc	r19, r25
    186e:	4a 1f       	adc	r20, r26
    1870:	5b 1f       	adc	r21, r27
    1872:	2e 15       	cp	r18, r14
    1874:	3f 05       	cpc	r19, r15
    1876:	40 07       	cpc	r20, r16
    1878:	51 07       	cpc	r21, r17
    187a:	48 f4       	brcc	.+18     	; 0x188e <__udivdi3+0xbb2>
    187c:	e1 2c       	mov	r14, r1
    187e:	f1 2c       	mov	r15, r1
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	06 2f       	mov	r16, r22
    1884:	11 2d       	mov	r17, r1
    1886:	ae 0c       	add	r10, r14
    1888:	bf 1c       	adc	r11, r15
    188a:	c0 1e       	adc	r12, r16
    188c:	d1 1e       	adc	r13, r17
    188e:	ca 01       	movw	r24, r20
    1890:	aa 27       	eor	r26, r26
    1892:	bb 27       	eor	r27, r27
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	6a 0d       	add	r22, r10
    189a:	7b 1d       	adc	r23, r11
    189c:	8c 1d       	adc	r24, r12
    189e:	9d 1d       	adc	r25, r13
    18a0:	69 8c       	ldd	r6, Y+25	; 0x19
    18a2:	7a 8c       	ldd	r7, Y+26	; 0x1a
    18a4:	8b 8c       	ldd	r8, Y+27	; 0x1b
    18a6:	9c 8c       	ldd	r9, Y+28	; 0x1c
    18a8:	66 16       	cp	r6, r22
    18aa:	77 06       	cpc	r7, r23
    18ac:	88 06       	cpc	r8, r24
    18ae:	99 06       	cpc	r9, r25
    18b0:	40 f1       	brcs	.+80     	; 0x1902 <__udivdi3+0xc26>
    18b2:	66 15       	cp	r22, r6
    18b4:	77 05       	cpc	r23, r7
    18b6:	88 05       	cpc	r24, r8
    18b8:	99 05       	cpc	r25, r9
    18ba:	09 f0       	breq	.+2      	; 0x18be <__udivdi3+0xbe2>
    18bc:	43 c0       	rjmp	.+134    	; 0x1944 <__udivdi3+0xc68>
    18be:	d9 01       	movw	r26, r18
    18c0:	99 27       	eor	r25, r25
    18c2:	88 27       	eor	r24, r24
    18c4:	69 96       	adiw	r28, 0x19	; 25
    18c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    18c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    18ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    18cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    18ce:	69 97       	sbiw	r28, 0x19	; 25
    18d0:	40 70       	andi	r20, 0x00	; 0
    18d2:	50 70       	andi	r21, 0x00	; 0
    18d4:	82 0f       	add	r24, r18
    18d6:	93 1f       	adc	r25, r19
    18d8:	a4 1f       	adc	r26, r20
    18da:	b5 1f       	adc	r27, r21
    18dc:	2d a5       	ldd	r18, Y+45	; 0x2d
    18de:	3e a5       	ldd	r19, Y+46	; 0x2e
    18e0:	4f a5       	ldd	r20, Y+47	; 0x2f
    18e2:	58 a9       	ldd	r21, Y+48	; 0x30
    18e4:	6e 96       	adiw	r28, 0x1e	; 30
    18e6:	0f ac       	ldd	r0, Y+63	; 0x3f
    18e8:	6e 97       	sbiw	r28, 0x1e	; 30
    18ea:	04 c0       	rjmp	.+8      	; 0x18f4 <__udivdi3+0xc18>
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	44 1f       	adc	r20, r20
    18f2:	55 1f       	adc	r21, r21
    18f4:	0a 94       	dec	r0
    18f6:	d2 f7       	brpl	.-12     	; 0x18ec <__udivdi3+0xc10>
    18f8:	28 17       	cp	r18, r24
    18fa:	39 07       	cpc	r19, r25
    18fc:	4a 07       	cpc	r20, r26
    18fe:	5b 07       	cpc	r21, r27
    1900:	08 f5       	brcc	.+66     	; 0x1944 <__udivdi3+0xc68>
    1902:	09 a9       	ldd	r16, Y+49	; 0x31
    1904:	1a a9       	ldd	r17, Y+50	; 0x32
    1906:	2b a9       	ldd	r18, Y+51	; 0x33
    1908:	3c a9       	ldd	r19, Y+52	; 0x34
    190a:	01 50       	subi	r16, 0x01	; 1
    190c:	10 40       	sbci	r17, 0x00	; 0
    190e:	20 40       	sbci	r18, 0x00	; 0
    1910:	30 40       	sbci	r19, 0x00	; 0
    1912:	09 ab       	std	Y+49, r16	; 0x31
    1914:	1a ab       	std	Y+50, r17	; 0x32
    1916:	2b ab       	std	Y+51, r18	; 0x33
    1918:	3c ab       	std	Y+52, r19	; 0x34
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <__udivdi3+0xc68>
    191c:	66 24       	eor	r6, r6
    191e:	77 24       	eor	r7, r7
    1920:	43 01       	movw	r8, r6
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	29 ab       	std	Y+49, r18	; 0x31
    192c:	3a ab       	std	Y+50, r19	; 0x32
    192e:	4b ab       	std	Y+51, r20	; 0x33
    1930:	5c ab       	std	Y+52, r21	; 0x34
    1932:	0b c0       	rjmp	.+22     	; 0x194a <__udivdi3+0xc6e>
    1934:	66 24       	eor	r6, r6
    1936:	77 24       	eor	r7, r7
    1938:	43 01       	movw	r8, r6
    193a:	19 aa       	std	Y+49, r1	; 0x31
    193c:	1a aa       	std	Y+50, r1	; 0x32
    193e:	1b aa       	std	Y+51, r1	; 0x33
    1940:	1c aa       	std	Y+52, r1	; 0x34
    1942:	03 c0       	rjmp	.+6      	; 0x194a <__udivdi3+0xc6e>
    1944:	66 24       	eor	r6, r6
    1946:	77 24       	eor	r7, r7
    1948:	43 01       	movw	r8, r6
    194a:	fe 01       	movw	r30, r28
    194c:	71 96       	adiw	r30, 0x11	; 17
    194e:	88 e0       	ldi	r24, 0x08	; 8
    1950:	df 01       	movw	r26, r30
    1952:	1d 92       	st	X+, r1
    1954:	8a 95       	dec	r24
    1956:	e9 f7       	brne	.-6      	; 0x1952 <__udivdi3+0xc76>
    1958:	a9 a8       	ldd	r10, Y+49	; 0x31
    195a:	ba a8       	ldd	r11, Y+50	; 0x32
    195c:	cb a8       	ldd	r12, Y+51	; 0x33
    195e:	dc a8       	ldd	r13, Y+52	; 0x34
    1960:	a9 8a       	std	Y+17, r10	; 0x11
    1962:	ba 8a       	std	Y+18, r11	; 0x12
    1964:	cb 8a       	std	Y+19, r12	; 0x13
    1966:	dc 8a       	std	Y+20, r13	; 0x14
    1968:	6d 8a       	std	Y+21, r6	; 0x15
    196a:	7e 8a       	std	Y+22, r7	; 0x16
    196c:	8f 8a       	std	Y+23, r8	; 0x17
    196e:	98 8e       	std	Y+24, r9	; 0x18
    1970:	29 a9       	ldd	r18, Y+49	; 0x31
    1972:	3a 89       	ldd	r19, Y+18	; 0x12
    1974:	4b 89       	ldd	r20, Y+19	; 0x13
    1976:	5c 89       	ldd	r21, Y+20	; 0x14
    1978:	66 2d       	mov	r22, r6
    197a:	7e 89       	ldd	r23, Y+22	; 0x16
    197c:	8f 89       	ldd	r24, Y+23	; 0x17
    197e:	98 8d       	ldd	r25, Y+24	; 0x18
    1980:	c2 5a       	subi	r28, 0xA2	; 162
    1982:	df 4f       	sbci	r29, 0xFF	; 255
    1984:	e2 e1       	ldi	r30, 0x12	; 18
    1986:	5d c0       	rjmp	.+186    	; 0x1a42 <__epilogue_restores__>

00001988 <__udivmodsi4>:
    1988:	a1 e2       	ldi	r26, 0x21	; 33
    198a:	1a 2e       	mov	r1, r26
    198c:	aa 1b       	sub	r26, r26
    198e:	bb 1b       	sub	r27, r27
    1990:	fd 01       	movw	r30, r26
    1992:	0d c0       	rjmp	.+26     	; 0x19ae <__udivmodsi4_ep>

00001994 <__udivmodsi4_loop>:
    1994:	aa 1f       	adc	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	ee 1f       	adc	r30, r30
    199a:	ff 1f       	adc	r31, r31
    199c:	a2 17       	cp	r26, r18
    199e:	b3 07       	cpc	r27, r19
    19a0:	e4 07       	cpc	r30, r20
    19a2:	f5 07       	cpc	r31, r21
    19a4:	20 f0       	brcs	.+8      	; 0x19ae <__udivmodsi4_ep>
    19a6:	a2 1b       	sub	r26, r18
    19a8:	b3 0b       	sbc	r27, r19
    19aa:	e4 0b       	sbc	r30, r20
    19ac:	f5 0b       	sbc	r31, r21

000019ae <__udivmodsi4_ep>:
    19ae:	66 1f       	adc	r22, r22
    19b0:	77 1f       	adc	r23, r23
    19b2:	88 1f       	adc	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	1a 94       	dec	r1
    19b8:	69 f7       	brne	.-38     	; 0x1994 <__udivmodsi4_loop>
    19ba:	60 95       	com	r22
    19bc:	70 95       	com	r23
    19be:	80 95       	com	r24
    19c0:	90 95       	com	r25
    19c2:	9b 01       	movw	r18, r22
    19c4:	ac 01       	movw	r20, r24
    19c6:	bd 01       	movw	r22, r26
    19c8:	cf 01       	movw	r24, r30
    19ca:	08 95       	ret

000019cc <__mulsi3>:
    19cc:	62 9f       	mul	r22, r18
    19ce:	d0 01       	movw	r26, r0
    19d0:	73 9f       	mul	r23, r19
    19d2:	f0 01       	movw	r30, r0
    19d4:	82 9f       	mul	r24, r18
    19d6:	e0 0d       	add	r30, r0
    19d8:	f1 1d       	adc	r31, r1
    19da:	64 9f       	mul	r22, r20
    19dc:	e0 0d       	add	r30, r0
    19de:	f1 1d       	adc	r31, r1
    19e0:	92 9f       	mul	r25, r18
    19e2:	f0 0d       	add	r31, r0
    19e4:	83 9f       	mul	r24, r19
    19e6:	f0 0d       	add	r31, r0
    19e8:	74 9f       	mul	r23, r20
    19ea:	f0 0d       	add	r31, r0
    19ec:	65 9f       	mul	r22, r21
    19ee:	f0 0d       	add	r31, r0
    19f0:	99 27       	eor	r25, r25
    19f2:	72 9f       	mul	r23, r18
    19f4:	b0 0d       	add	r27, r0
    19f6:	e1 1d       	adc	r30, r1
    19f8:	f9 1f       	adc	r31, r25
    19fa:	63 9f       	mul	r22, r19
    19fc:	b0 0d       	add	r27, r0
    19fe:	e1 1d       	adc	r30, r1
    1a00:	f9 1f       	adc	r31, r25
    1a02:	bd 01       	movw	r22, r26
    1a04:	cf 01       	movw	r24, r30
    1a06:	11 24       	eor	r1, r1
    1a08:	08 95       	ret

00001a0a <__prologue_saves__>:
    1a0a:	2f 92       	push	r2
    1a0c:	3f 92       	push	r3
    1a0e:	4f 92       	push	r4
    1a10:	5f 92       	push	r5
    1a12:	6f 92       	push	r6
    1a14:	7f 92       	push	r7
    1a16:	8f 92       	push	r8
    1a18:	9f 92       	push	r9
    1a1a:	af 92       	push	r10
    1a1c:	bf 92       	push	r11
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	ca 1b       	sub	r28, r26
    1a34:	db 0b       	sbc	r29, r27
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	09 94       	ijmp

00001a42 <__epilogue_restores__>:
    1a42:	2a 88       	ldd	r2, Y+18	; 0x12
    1a44:	39 88       	ldd	r3, Y+17	; 0x11
    1a46:	48 88       	ldd	r4, Y+16	; 0x10
    1a48:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a50:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a52:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a54:	b9 84       	ldd	r11, Y+9	; 0x09
    1a56:	c8 84       	ldd	r12, Y+8	; 0x08
    1a58:	df 80       	ldd	r13, Y+7	; 0x07
    1a5a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a5c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a5e:	0c 81       	ldd	r16, Y+4	; 0x04
    1a60:	1b 81       	ldd	r17, Y+3	; 0x03
    1a62:	aa 81       	ldd	r26, Y+2	; 0x02
    1a64:	b9 81       	ldd	r27, Y+1	; 0x01
    1a66:	ce 0f       	add	r28, r30
    1a68:	d1 1d       	adc	r29, r1
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	ed 01       	movw	r28, r26
    1a76:	08 95       	ret

00001a78 <abort>:
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	f8 94       	cli
    1a7e:	00 c0       	rjmp	.+0      	; 0x1a80 <_exit>

00001a80 <_exit>:
    1a80:	f8 94       	cli

00001a82 <__stop_program>:
    1a82:	ff cf       	rjmp	.-2      	; 0x1a82 <__stop_program>
